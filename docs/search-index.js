var searchIndex = JSON.parse('{\
"argtool":{"doc":"Simple and functional argparse","t":"CCCCAADEENNNNNNLMMLLLLLLLLLMMLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLDLMLLLMLLLLLLLMLLLLLL","n":["ArgGroup","ArgItem","ArgType","ArgValue","argitem","argroup","ArgItem","ArgType","ArgValue","BaseType","FlagType","ListType","PositionalType","STR","VEC","add_alias","alias","arg_type","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","detail","fmt","from","from","from","get_bool","get_f32","get_i32","get_string","get_vec","into","into","into","name","new","required","set_argtype","set_default","set_detail","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ArgGroup","add_arg","arg_map","borrow","borrow_mut","default","discription","from","get_bool","get_f32","get_i32","get_string","get_vec","into","name","new","parse","to_string","try_from","try_into","type_id"],"q":["argtool","","","","","","argtool::argitem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argtool::argroup","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","struct for one argument An example","enum for argtype There are four argument type can be used. …","","BaseType:","FlagType","ListType:","PositionalType:","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","create a new argument","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,13,13,13,13,3,3,1,1,1,13,1,3,13,1,3,3,3,1,1,1,3,13,1,3,3,3,3,3,3,13,1,3,1,1,1,1,1,1,3,13,1,3,13,1,3,13,1,3,13,1,3,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[[]],[[],1],0,0,[[3,4],5],[[]],[[]],[[]],[3,[[8,[6,7]]]],[3,[[8,[9,7]]]],[3,[[8,[10,7]]]],[3,[[8,[11,7]]]],[3,[[8,[[12,[11]],7]]]],[[]],[[]],[[]],0,[[2,2],1],0,[[1,13],1],[[1,2,6],1],[[1,2],1],[[]],[[],11],[[],11],[[],11],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],14],[[],14],[[],14],0,[[15,1],[[8,[7]]]],0,[[]],[[]],[[],15],0,[[]],[[15,2],[[8,[6,7]]]],[[15,2],[[8,[9,7]]]],[[15,2],[[8,[10,7]]]],[[15,2],[[8,[11,7]]]],[[15,2],[[8,[[12,[11]],7]]]],[[]],0,[[11,11],15],[[15,16],[[8,[[17,[11,3]],7]]]],[[],11],[[],8],[[],8],[[],14]],"p":[[3,"ArgItem"],[15,"str"],[4,"ArgValue"],[3,"Formatter"],[6,"Result"],[15,"bool"],[3,"Error"],[4,"Result"],[15,"f32"],[15,"i32"],[3,"String"],[3,"Vec"],[4,"ArgType"],[3,"TypeId"],[3,"ArgGroup"],[8,"Iterator"],[3,"HashMap"]]},\
"minigrep":{"doc":"minigrep","t":"AAFADMMLLMLLLMMMMLLMLLMMLMMMMMLLLAAIDLLLLLLLLKLLLLLLLLIDLLLLKLLLLKLLLLLKLLLLLAAADLLLLLLLLLMLLLIDDLLLLMLLLLLLLLMMMLLLLLLLMLKLLLLLLLLLLNDEMMLLLLMMMLLLLLLLLLMLLLLLLLLMLLLLFLLLLLLLL","n":["argparse","grep","main_loop","utils","MiniGrepArg","ahead_size","behind_size","borrow","borrow_mut","color_flag","deref","deref_mut","drop","expr","extract_expr","file_path","file_path_flag","fmt","from","ignorecase","init","into","line_num_flag","max_depth","new","replace_expr","replace_times","replacer","skip_hidden","thread_num","try_from","try_into","type_id","handler","matcher","Grep","GrepGroup","borrow","borrow_mut","deref","deref_mut","drop","extract_line","from","from_re_group","grep_one_line","grep_one_line","init","into","match_line","replace_line","try_from","try_into","type_id","PatternMatch","RegexMatcher","borrow","borrow_mut","clone","clone_into","contain","contain","deref","deref_mut","drop","extract","extract","from","init","into","new","replace","replace","to_owned","try_from","try_into","type_id","glober","logger","reader","PathGlober","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","sender","try_from","try_into","type_id","LinePrint","LinePrinter","PrintBuffer","borrow","borrow","borrow_mut","borrow_mut","cc","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","file_path","file_path_flag","file_path_flag","fmt","from","from","init","init","into","into","line_num_flag","new","print","print","print_all","push","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","EndOfFile","FileReader","MyErrors","ahead_size","behind_size","borrow","borrow","borrow_mut","borrow_mut","buf_reader","buffer","cc","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","file_path","fmt","fmt","from","from","init","init","into","into","line","new","next","print_buffer","provide","read_file","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["minigrep","","","","minigrep::argparse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minigrep::grep","","minigrep::grep::handler","","","","","","","","","","","","","","","","","","","minigrep::grep::matcher","","","","","","","","","","","","","","","","","","","","","","","minigrep::utils","","","minigrep::utils::glober","","","","","","","","","","","","","","minigrep::utils::logger","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minigrep::utils::reader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","main loop for grep a file","","an arg struct to store argument for usage usage","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","create a new MiniGrepArg from sys_args","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","trait for different pattern match method","match with regex","","","","","if it contain the pattern","if it contain the pattern","","","","extract the pattern","extract pos","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Replace the pattern","Replace the pattern","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","for weather print value with num and file_name","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","My own error","buffer size, the size to show before matched line","the size to show after matched line pub because it will be …","","","","","","","line number index","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","create a new FileReader instance","A next function for custom iterator want to use borrow as …","print all ahead buffer","","read file and retuen buffer reader","","","","","","","",""],"i":[0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,12,12,12,12,12,12,12,12,31,12,12,12,12,12,12,12,12,0,0,17,17,17,17,32,17,17,17,17,32,17,17,17,17,17,32,17,17,17,17,17,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,2,23,2,23,2,23,23,2,23,2,23,2,23,2,2,23,23,2,23,2,23,2,23,23,2,33,23,2,2,23,2,23,2,23,2,23,25,0,0,1,1,1,25,1,25,1,1,1,25,25,1,25,1,25,1,25,25,1,25,25,1,25,1,25,1,25,1,1,1,1,25,0,25,25,1,25,1,25,1,25],"f":[0,0,[[1,2],[[4,[2,3]]]],0,0,0,0,[[]],[[]],0,[5],[5],[5],0,0,0,0,[[6,7],8],[[]],0,[[],5],[[]],0,0,[9,[[10,[6]]]],0,0,0,0,0,[[],4],[[],4],[[],11],0,0,0,0,[[]],[[]],[5],[5],[5],[[12,13]],[[]],[[[15,[14]],[15,[14]],[15,[14]],[15,[14]],5,16,16],[[10,[12]]]],[13],[[12,13]],[[],5],[[]],[[12,13]],[[12,13],14],[[],4],[[],4],[[],11],0,0,[[]],[[]],[17,17],[[]],[13,16],[[17,13],16],[5],[5],[5],[13,15],[[17,13],15],[[]],[[],5],[[]],[[13,16],[[10,[17]]]],[[13,13,5],[[18,[13]]]],[[17,13,13,5],[[18,[13]]]],[[]],[[],4],[[],4],[[],11],0,0,0,0,[[]],[[]],[5],[5],[5],[[]],[[],5],[[]],[[13,16,5,[21,[[20,[19]]]]],[[4,[22,3]]]],0,[[],4],[[],4],[[],11],0,0,0,[[]],[[]],[[]],[[]],0,[23,23],[[]],[5],[5],[5],[5],[5],[5],0,0,0,[[23,7],8],[[]],[[]],[[],5],[[],5],[[]],[[]],0,[[16,16,14],2],[[13,5,13]],[[23,13,5,13]],[2],[[2,14,24]],[[]],[[],4],[[],4],[[],4],[[],4],[[],11],[[],11],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,[25,25],[[]],[5],[5],[5],[5],[5],[5],[[25,25],16],0,[[25,7],8],[[25,7],8],[[]],[[]],[[],5],[[],5],[[]],[[]],0,[[14,24,24],[[4,[1,3]]]],[1,[[4,[13,3]]]],[[1,2]],[26],[14,[[30,[[29,[[28,[27]]]]]]]],[[]],[[],14],[[],4],[[],4],[[],4],[[],4],[[],11],[[],11]],"p":[[3,"FileReader"],[3,"PrintBuffer"],[3,"Error"],[4,"Result"],[15,"usize"],[3,"MiniGrepArg"],[3,"Formatter"],[6,"Result"],[8,"Iterator"],[6,"Result"],[3,"TypeId"],[3,"GrepGroup"],[15,"str"],[3,"String"],[3,"Vec"],[15,"bool"],[3,"RegexMatcher"],[4,"Cow"],[3,"PathBuf"],[4,"Option"],[3,"Sender"],[3,"PathGlober"],[3,"LinePrinter"],[15,"i32"],[4,"MyErrors"],[3,"Demand"],[3,"File"],[3,"BufReader"],[3,"Lines"],[6,"Result"],[8,"Grep"],[8,"PatternMatch"],[8,"LinePrint"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
