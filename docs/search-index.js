var searchIndex = JSON.parse('{\
"argtool":{"doc":"Simple and functional argparse","t":[0,0,3,4,4,13,13,13,13,13,13,11,12,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,12,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11],"n":["argitem","argroup","ArgItem","ArgType","ArgValue","BaseType","FlagType","ListType","PositionalType","STR","VEC","add_alias","alias","arg_type","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","detail","fmt","from","from","from","get_bool","get_f32","get_i32","get_string","get_vec","into","into","into","name","new","required","set_argtype","set_default","set_detail","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ArgGroup","add_arg","arg_map","borrow","borrow_mut","default","discription","from","get_bool","get_f32","get_i32","get_string","get_vec","into","name","new","parse","to_string","try_from","try_into","type_id"],"q":["argtool","","argtool::argitem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argtool::argroup","","","","","","","","","","","","","","","","","","","",""],"d":["","","struct for one argument An example","enum for argtype There are four argument type can be …","","BaseType:","FlagType","ListType:","PositionalType: ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create a new argument","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,2,2,3,3,3,1,3,2,1,3,2,2,2,3,3,3,2,1,3,2,2,2,2,2,2,1,3,2,3,3,3,3,3,3,2,1,3,2,1,3,2,1,3,2,1,3,2,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["str",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["argvalue",4]],[[]],[[],["argitem",3]],null,null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["bool",15],["result",4],["error",3]]],[[],[["result",4],["f32",15],["error",3]]],[[],[["result",4],["error",3],["i32",15]]],[[],[["result",4],["string",3],["error",3]]],[[],[["result",4],["vec",3],["error",3]]],[[]],[[]],[[]],null,[[["str",15]],["argitem",3]],null,[[["argtype",4]]],[[["bool",15],["str",15]]],[[["str",15]]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["argitem",3]],[["result",4],["error",3]]],null,[[]],[[]],[[],["arggroup",3]],null,[[]],[[["str",15]],[["bool",15],["result",4],["error",3]]],[[["str",15]],[["result",4],["f32",15],["error",3]]],[[["str",15]],[["result",4],["error",3],["i32",15]]],[[["str",15]],[["result",4],["string",3],["error",3]]],[[["str",15]],[["result",4],["vec",3],["error",3]]],[[]],null,[[["string",3]],["arggroup",3]],[[],[["hashmap",3],["result",4],["error",3]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"ArgType"],[4,"ArgValue"],[3,"ArgItem"],[3,"ArgGroup"]]},\
"grep":{"doc":"","t":[5,0,0,13,3,4,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,12,5,11,11,11,5,11,11,11,11,11,11,11,11],"n":["main","test","utils","EndOfFile","FileReader","MyErrors","borrow","borrow","borrow_mut","borrow_mut","buf_reader","buffer","buffer_size","cc","clone","clone_into","eq","fmt","fmt","from","from","into","into","line","main_loop","new","next","print_buffer","read_file","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["grep","","","grep::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","A next function for custom iterator want to use borrow as …","","read file and retuen buffer reader","","","","","","","",""],"i":[0,0,0,1,0,0,2,1,2,1,2,2,2,2,1,1,1,1,1,2,1,2,1,2,0,2,2,2,0,1,1,2,1,2,1,2,1],"f":[[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,[[],["myerrors",4]],[[]],[[["myerrors",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["filereader",3],["i32",15]],[["error",3],["result",4]]],[[["string",3],["i32",15]],[["filereader",3],["error",3],["result",4]]],[[],[["result",4],["str",15],["error",3]]],[[]],[[["string",3]],[["bufreader",3],["result",6]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"MyErrors"],[3,"FileReader"]]}\
}');
initSearch(searchIndex);