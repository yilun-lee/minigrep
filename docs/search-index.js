var searchIndex = JSON.parse('{\
"argtool":{"doc":"Simple and functional argparse","t":"CCCCAADEENNNNNNLMMLLLLLLLLLMMLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLDLMLLLMLLLLLLLMLLLLLL","n":["ArgGroup","ArgItem","ArgType","ArgValue","argitem","argroup","ArgItem","ArgType","ArgValue","BaseType","FlagType","ListType","PositionalType","STR","VEC","add_alias","alias","arg_type","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","detail","fmt","from","from","from","get_bool","get_f32","get_i32","get_string","get_vec","into","into","into","name","new","required","set_argtype","set_default","set_detail","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ArgGroup","add_arg","arg_map","borrow","borrow_mut","default","discription","from","get_bool","get_f32","get_i32","get_string","get_vec","into","name","new","parse","to_string","try_from","try_into","type_id"],"q":["argtool","","","","","","argtool::argitem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argtool::argroup","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","struct for one argument An example","enum for argtype There are four argument type can be used. …","","BaseType:","FlagType","ListType:","PositionalType: ","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","create a new argument","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,13,13,13,13,3,3,1,1,1,13,1,3,13,1,3,3,3,1,1,1,3,13,1,3,3,3,3,3,3,13,1,3,1,1,1,1,1,1,3,13,1,3,13,1,3,13,1,3,13,1,3,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[[]],[[],1],0,0,[[3,4],5],[[]],[[]],[[]],[3,[[8,[6,7]]]],[3,[[8,[9,7]]]],[3,[[8,[10,7]]]],[3,[[8,[11,7]]]],[3,[[8,[[12,[11]],7]]]],[[]],[[]],[[]],0,[[2,2],1],0,[[1,13],1],[[1,2,6],1],[[1,2],1],[[]],[[],11],[[],11],[[],11],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],14],[[],14],[[],14],0,[[15,1],[[8,[7]]]],0,[[]],[[]],[[],15],0,[[]],[[15,2],[[8,[6,7]]]],[[15,2],[[8,[9,7]]]],[[15,2],[[8,[10,7]]]],[[15,2],[[8,[11,7]]]],[[15,2],[[8,[[12,[11]],7]]]],[[]],0,[[11,11],15],[[15,16],[[8,[[17,[11,3]],7]]]],[[],11],[[],8],[[],8],[[],14]],"p":[[3,"ArgItem"],[15,"str"],[4,"ArgValue"],[3,"Formatter"],[6,"Result"],[15,"bool"],[3,"Error"],[4,"Result"],[15,"f32"],[15,"i32"],[3,"String"],[3,"Vec"],[4,"ArgType"],[3,"TypeId"],[3,"ArgGroup"],[8,"Iterator"],[3,"HashMap"]]},\
"grep":{"doc":"","t":"AAFADMMLLMMMMMLLMLMLMMMMLLLAAIDLLLLLKLLLLLLLIDLLLLKLKLLLLKLLLLLAAADLLLLLLLLLLIDLLLLMLLLMKLLLLLNDEMMLLLLMMMLLLMLLLLLLMLLLLFLLLLLLLL","n":["argparse","grep","main_loop","utils","MiniGrepArg","ahead_size","behind_size","borrow","borrow_mut","color_flag","expr","extract_expr","file_path","file_path_flag","fmt","from","ignorecase","into","line_num_flag","new","replace_expr","replace_times","replacer","skip_hidden","try_from","try_into","type_id","handler","matcher","Grep","GrepGroup","borrow","borrow_mut","extract_line","from","from_re_group","grep_one_line","grep_one_line","into","match_line","replace_line","try_from","try_into","type_id","PatternMatch","RegexMatcher","borrow","borrow_mut","clone","clone_into","contain","contain","extract","extract","from","into","new","replace","replace","to_owned","try_from","try_into","type_id","glober","logger","reader","PathGlober","borrow","borrow_mut","from","into","into_iter","new","next","try_from","try_into","type_id","LinePrint","LinePrinter","borrow","borrow_mut","clone","clone_into","file_path_flag","fmt","from","into","line_num_flag","print","print","to_owned","try_from","try_into","type_id","EndOfFile","FileReader","MyErrors","ahead_size","behind_size","borrow","borrow","borrow_mut","borrow_mut","buf_reader","buffer","cc","clone","clone_into","eq","file_path","fmt","fmt","from","from","into","into","line","new","next","print_buffer","provide","read_file","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["grep","","","","grep::argparse","","","","","","","","","","","","","","","","","","","","","","","grep::grep","","grep::grep::handler","","","","","","","","","","","","","","","grep::grep::matcher","","","","","","","","","","","","","","","","","","","grep::utils","","","grep::utils::glober","","","","","","","","","","","grep::utils::logger","","","","","","","","","","","","","","","","","grep::utils::reader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","main loop for grep a file","","an arg struct to store argument for usage usage","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","create a new MiniGrepArg from sys_args","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","trait for different pattern match method","match with regex","","","","","if it contain the pattern","if it contain the pattern","extract the pattern","extract pos","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Replace the pattern","Replace the pattern","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","for weather print value with num and file_name","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","My own error","buffer size, the size to show before matched line","the size to show after matched line pub because it will be …","","","","","","","line number index","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","create a new FileReader instance","A next function for custom iterator want to use borrow as …","print all ahead buffer","","read file and retuen buffer reader","","","","","","","",""],"i":[0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,11,11,11,11,11,29,11,11,11,11,11,11,11,0,0,17,17,17,17,30,17,30,17,17,17,17,30,17,17,17,17,17,0,0,0,0,19,19,19,19,19,19,19,19,19,19,0,0,21,21,21,21,21,21,21,21,21,2,21,21,21,21,21,22,0,0,1,1,1,22,1,22,1,1,1,22,22,22,1,22,22,1,22,1,22,1,1,1,1,22,0,22,22,1,22,1,22,1,22],"f":[0,0,[[1,2],[[4,[3]]]],0,0,0,0,[[]],[[]],0,0,0,0,0,[[5,6],7],[[]],0,[[]],0,[8,[[9,[5]]]],0,0,0,0,[[],4],[[],4],[[],10],0,0,0,0,[[]],[[]],[[11,12]],[[]],[[[14,[13]],[14,[13]],[14,[13]],[14,[13]],15,16,16],[[9,[11]]]],[12],[[11,12]],[[]],[[11,12]],[[11,12],13],[[],4],[[],4],[[],10],0,0,[[]],[[]],[17,17],[[]],[12,16],[[17,12],16],[12,14],[[17,12],14],[[]],[[]],[[12,16],[[9,[17]]]],[[12,12,15],[[18,[12]]]],[[17,12,12,15],[[18,[12]]]],[[]],[[],4],[[],4],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[12,16],[[4,[19,3]]]],[19,20],[[],4],[[],4],[[],10],0,0,[[]],[[]],[21,21],[[]],0,[[21,6],7],[[]],[[]],0,[[12,15,12]],[[21,12,15,12]],[[]],[[],4],[[],4],[[],10],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,[22,22],[[]],[[22,22],16],0,[[22,6],7],[[22,6],7],[[]],[[]],[[]],[[]],0,[[13,23,23],[[4,[1,3]]]],[1,[[4,[12,3]]]],[1],[24],[13,[[28,[[27,[[26,[25]]]]]]]],[[]],[[],13],[[],4],[[],4],[[],4],[[],4],[[],10],[[],10]],"p":[[3,"FileReader"],[8,"LinePrint"],[3,"Error"],[4,"Result"],[3,"MiniGrepArg"],[3,"Formatter"],[6,"Result"],[8,"Iterator"],[6,"Result"],[3,"TypeId"],[3,"GrepGroup"],[15,"str"],[3,"String"],[3,"Vec"],[15,"usize"],[15,"bool"],[3,"RegexMatcher"],[4,"Cow"],[3,"PathGlober"],[4,"Option"],[3,"LinePrinter"],[4,"MyErrors"],[15,"i32"],[3,"Demand"],[3,"File"],[3,"BufReader"],[3,"Lines"],[6,"Result"],[8,"Grep"],[8,"PatternMatch"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
