var searchIndex = JSON.parse('{\
"argtool":{"doc":"Simple and functional argparse","t":"CCCCAADEENNNNNNLMMLLLLLLLLLMMLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLDLMLLLMLLLLLLLMLLLLLL","n":["ArgGroup","ArgItem","ArgType","ArgValue","argitem","argroup","ArgItem","ArgType","ArgValue","BaseType","FlagType","ListType","PositionalType","STR","VEC","add_alias","alias","arg_type","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","detail","fmt","from","from","from","get_bool","get_f32","get_i32","get_string","get_vec","into","into","into","name","new","required","set_argtype","set_default","set_detail","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ArgGroup","add_arg","arg_map","borrow","borrow_mut","default","discription","from","get_bool","get_f32","get_i32","get_string","get_vec","into","name","new","parse","to_string","try_from","try_into","type_id"],"q":["argtool","","","","","","argtool::argitem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argtool::argroup","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","struct for one argument An example","enum for argtype There are four argument type can be used. …","","BaseType:","FlagType","ListType:","PositionalType: ","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","create a new argument","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,13,13,13,13,3,3,1,1,1,13,1,3,13,1,3,3,3,1,1,1,3,13,1,3,3,3,3,3,3,13,1,3,1,1,1,1,1,1,3,13,1,3,13,1,3,13,1,3,13,1,3,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[[]],[[],1],0,0,[[3,4],5],[[]],[[]],[[]],[3,[[8,[6,7]]]],[3,[[8,[9,7]]]],[3,[[8,[10,7]]]],[3,[[8,[11,7]]]],[3,[[8,[[12,[11]],7]]]],[[]],[[]],[[]],0,[[2,2],1],0,[[1,13],1],[[1,2,6],1],[[1,2],1],[[]],[[],11],[[],11],[[],11],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],14],[[],14],[[],14],0,[[15,1],[[8,[7]]]],0,[[]],[[]],[[],15],0,[[]],[[15,2],[[8,[6,7]]]],[[15,2],[[8,[9,7]]]],[[15,2],[[8,[10,7]]]],[[15,2],[[8,[11,7]]]],[[15,2],[[8,[[12,[11]],7]]]],[[]],0,[[11,11],15],[[15,16],[[8,[[17,[11,3]],7]]]],[[],11],[[],8],[[],8],[[],14]],"p":[[3,"ArgItem"],[15,"str"],[4,"ArgValue"],[3,"Formatter"],[6,"Result"],[15,"bool"],[3,"Error"],[4,"Result"],[15,"f32"],[15,"i32"],[3,"String"],[3,"Vec"],[4,"ArgType"],[3,"TypeId"],[3,"ArgGroup"],[8,"Iterator"],[3,"HashMap"]]},\
"grep":{"doc":"","t":"AAFADMMLLMMMLLMLMMLMLLLAADDDDIILLLLLLLLLLLLLLLLKMMMMKLLLLMMLLLLLLLLLLLLIDLLLLKLKLLLLKLLLLLNDDEDMMLLLLLLLLMMMLLLLLMMLLLLLLLLLLLLMMLLLLLLLFLLLLLLLLLLLLLLL","n":["argparse","grep","main_loop","utils","MiniGrepArg","ahead_size","behind_size","borrow","borrow_mut","expression","file_path","file_path_flag","fmt","from","ignorecase","into","line_num_flag","match_only_flag","new","skip_hidden","try_from","try_into","type_id","handler","matcher","LineExtractor","LineMatcher","LinePainter","LineReplacer","MatchLine","ReplaceLine","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","match_line","matcher","matcher","matcher","matcher","replace_line","replace_line","replace_line","replace_line","replace_line","substitute","times","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","PatternMatch","RegexMatcher","borrow","borrow_mut","clone","clone_into","contain","contain","extract","extract","from","into","new","replace","replace","to_owned","try_from","try_into","type_id","EndOfFile","FileReader","LinePrinter","MyErrors","PathGlober","ahead_size","behind_size","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf_reader","buffer","cc","clone","clone","clone_into","clone_into","eq","file_path","file_path_flag","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","line","line_num_flag","new","new","next","next","print","print_buffer","provide","read_file","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["grep","","","","grep::argparse","","","","","","","","","","","","","","","","","","","grep::grep","","grep::grep::handler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","grep::grep::matcher","","","","","","","","","","","","","","","","","","","grep::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","main loop for grep a file","","an arg struct to store argument for usage usage","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","create a new MiniGrepArg from sys_args","","","","","","","","for match mod","","for replace mod","trait for match a line and return bool, for match only May …","trait for match a line and return bool and line This will …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","trait for different pattern match method","match with regex","","","","","if it contain the pattern","if it contain the pattern","extract the pattern","extract pos","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Replace the pattern","Replace the pattern","","","","","","","for weather print value with num and file_name","My own error","","buffer size, the size to show before matched line","the size to show after matched line pub because it will be …","","","","","","","","","","","line number index","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","create a new FileReader instance","","A next function for custom iterator want to use borrow as …","","","print all ahead buffer","","read file and retuen buffer reader","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,14,15,16,17,14,15,16,17,14,15,16,17,14,15,16,17,32,14,15,16,17,33,14,15,16,17,17,17,14,15,16,17,14,15,16,17,14,15,16,17,0,0,18,18,18,18,2,18,2,18,18,18,18,2,18,18,18,18,18,22,0,0,0,0,1,1,1,25,22,4,1,25,22,4,1,1,1,22,4,22,4,22,1,4,22,22,4,1,25,22,4,1,25,22,4,25,1,4,1,25,1,25,4,1,22,0,22,4,22,1,25,22,4,1,25,22,4,1,25,22,4],"f":[0,0,[[1,2,3,4],[[6,[5]]]],0,0,0,0,[[]],[[]],0,0,0,[[7,8],9],[[]],0,[[]],0,0,[10,[[11,[7]]]],0,[[],6],[[],6],[[],12],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,3],0,0,0,0,[13],[[14,13]],[[15,13]],[[16,13]],[[17,13]],0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],12],[[],12],[[],12],[[],12],0,0,[[]],[[]],[18,18],[[]],[13,3],[[18,13],3],[13,19],[[18,13],19],[[]],[[]],[[13,3],[[11,[18]]]],[[13,13,20],[[21,[13]]]],[[18,13,13,20],[[21,[13]]]],[[]],[[],6],[[],6],[[],12],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[22,22],[4,4],[[]],[[]],[[22,22],3],0,0,[[22,8],9],[[22,8],9],[[4,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[23,24,24],[[6,[1,5]]]],[[13,3],[[6,[25,5]]]],[1,[[6,[13,5]]]],[25,26],[[4,13,20,13]],[[1,4]],[27],[23,[[31,[[30,[[29,[28]]]]]]]],[[]],[[]],[[],23],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],12],[[],12],[[],12],[[],12]],"p":[[3,"FileReader"],[8,"PatternMatch"],[15,"bool"],[3,"LinePrinter"],[3,"Error"],[4,"Result"],[3,"MiniGrepArg"],[3,"Formatter"],[6,"Result"],[8,"Iterator"],[6,"Result"],[3,"TypeId"],[15,"str"],[3,"LineMatcher"],[3,"LineExtractor"],[3,"LinePainter"],[3,"LineReplacer"],[3,"RegexMatcher"],[3,"Vec"],[15,"usize"],[4,"Cow"],[4,"MyErrors"],[3,"String"],[15,"i32"],[3,"PathGlober"],[4,"Option"],[3,"Demand"],[3,"File"],[3,"BufReader"],[3,"Lines"],[6,"Result"],[8,"MatchLine"],[8,"ReplaceLine"]]},\
"matmult":{"doc":"","t":"GFFFFF","n":["Matrix2x3f","file_to_mat","get_rand","main","mat_array","nalgebra_new_dot"],"q":["matmult","","","","",""],"d":["","","","","",""],"i":[0,0,0,0,0,0],"f":[0,[1,[[3,[[3,[2]]]]]],[[],[[3,[[3,[2]]]]]],[[]],[[[3,[[3,[2]]]]]],[[]]],"p":[[15,"str"],[15,"f64"],[3,"Vec"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
