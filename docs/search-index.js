var searchIndex = JSON.parse('{\
"aho_corasick":{"doc":"A library for finding occurrences of many patterns at …","t":"DDDEDDNNDENNINDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLALLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMDDDNNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AhoCorasick","AhoCorasickBuilder","Error","ErrorKind","FindIter","FindOverlappingIter","LeftmostFirst","LeftmostLongest","Match","MatchKind","PremultiplyOverflow","Standard","StateID","StateIDOverflow","StreamFindIter","anchored","ascii_case_insensitive","auto_configure","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_with_size","byte_classes","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dense_depth","description","dfa","earliest_find","end","eq","eq","find","find_iter","find_overlapping_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_usize","hash","heap_bytes","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_match","kind","len","match_kind","match_kind","max_id","max_pattern_len","new","new","new_auto_configured","next","next","next","packed","pattern","pattern_count","prefilter","premultiply","provide","replace_all","replace_all_bytes","replace_all_with","replace_all_with_bytes","start","stream_find_iter","stream_replace_all","stream_replace_all_with","supports_overlapping","supports_stream","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","max","max","requested_max","Builder","Config","FindIter","LeftmostFirst","LeftmostLongest","MatchKind","Searcher","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","eq","extend","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","heap_bytes","into","into","into","into","into","into_iter","match_kind","match_kind","minimum_len","new","new","new","next","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["aho_corasick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aho_corasick::ErrorKind","","","aho_corasick::packed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An automaton for searching multiple strings in linear time.","A builder for configuring an Aho-Corasick automaton.","An error that occurred during the construction of an …","The kind of error that occurred.","An iterator of non-overlapping matches in a particular …","An iterator of overlapping matches in a particular …","Use leftmost-first match semantics, which reports leftmost …","Use leftmost-longest match semantics, which reports …","A representation of a match reported by an Aho-Corasick …","A knob for controlling the match semantics of an …","An error that occurs when premultiplication of state IDs …","Use standard match semantics, which support overlapping …","A trait describing the representation of an automaton’s …","An error that occurs when constructing an automaton would …","An iterator that reports Aho-Corasick matches in a stream.","Enable anchored mode, which requires all matches to start …","Enable ASCII-aware case insensitive matching.","Automatically configure the settings on this builder …","","","","","","","","","","","","","","","","","","","Build an Aho-Corasick automaton using the configuration …","Build an Aho-Corasick automaton using the configuration …","Shrink the size of the transition alphabet by mapping …","","","","","","","","","","","","","","","Set the limit on how many NFA states use a dense …","","Compile the standard Aho-Corasick automaton into a …","Returns the location of the first detected match in …","The ending position of the match.","","","Returns the location of the first match according to the …","Returns an iterator of non-overlapping matches, using the …","Returns an iterator of overlapping matches in the given …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a <code>usize</code> to this implementation’s …","","Returns the approximate total amount of heap used by this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true if and only if this match is empty. That is, …","Returns true if and only if this automaton matches the …","Return the kind of this error.","The length, in bytes, of the match.","Returns the match kind used by this automaton.","Set the desired match semantics.","Return the maximum state identifier supported by this …","Returns the length of the longest pattern matched by this …","Create a new Aho-Corasick automaton using the default …","Create a new builder for configuring an Aho-Corasick …","Build an Aho-Corasick automaton with an automatically …","","","","A lower level API for packed multiple substring search, …","Returns the identifier of the pattern that matched.","Return the total number of patterns matched by this …","Enable heuristic prefilter optimizations.","Premultiply state identifiers in the transition table. …","","Replace all matches with a corresponding value in the …","Replace all matches using raw bytes with a corresponding …","Replace all matches using a closure called on each match. …","Replace all matches using raw bytes with a closure called …","The starting position of the match.","Returns an iterator of non-overlapping matches in the given","Search for and replace all matches of this automaton in …","Search the given reader and replace all matches of this …","Returns true if and only if this automaton supports …","Returns true if and only if this automaton supports stream …","","","","","","","","Convert this implementation’s representation to a <code>usize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum possible state ID.","The maximum possible state id.","The maximum ID required by premultiplication.","A builder for constructing a packed searcher from a …","The configuration for a packed multiple pattern searcher.","An iterator over non-overlapping matches from a packed …","Use leftmost-first match semantics, which reports leftmost …","Use leftmost-longest match semantics, which reports …","A knob for controlling the match semantics of a packed …","A packed searcher for quickly finding occurrences of …","Add the given pattern to this set to match.","","","","","","","","","","","Build a searcher from the patterns added to this builder …","Create a packed builder from this configuration. The …","","","","","","","","","","","","","Add the given iterator of patterns to this set to match.","Return the first occurrence of any of the patterns in this …","Return the first occurrence of any of the patterns in this …","Return an iterator of non-overlapping occurrences of the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the approximate total amount of heap used by this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Set the match semantics for this configuration.","Returns the match kind used by this packed searcher.","Returns the minimum length of a haystack that is required …","Create a new default configuration. A default …","Create a new builder for constructing a multi-pattern …","A convenience function for constructing a searcher from an …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,8,8,0,0,9,8,0,9,0,1,1,1,3,15,16,20,1,8,4,9,10,3,15,16,20,1,8,4,9,10,1,1,1,3,1,8,4,9,10,3,1,8,4,9,10,1,8,1,4,1,3,10,8,10,3,3,3,3,15,16,20,1,8,4,4,9,10,3,15,16,20,1,8,4,9,10,7,10,3,3,15,16,20,1,8,4,9,10,15,16,20,10,3,4,10,3,1,7,3,3,1,3,15,16,20,0,10,3,1,1,4,3,3,3,3,10,3,3,3,3,3,3,1,8,4,9,10,4,7,3,15,16,20,1,8,4,9,10,3,15,16,20,1,8,4,9,10,3,15,16,20,1,8,4,9,10,33,34,34,0,0,0,31,31,0,0,28,31,30,28,29,32,31,30,28,29,32,28,30,31,30,28,29,31,30,28,29,31,30,28,31,28,29,29,29,31,30,28,29,32,31,30,28,29,32,29,31,30,28,29,32,32,30,29,29,30,28,29,32,31,30,28,29,31,30,28,29,32,31,30,28,29,32,31,30,28,29,32],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[1,2],1],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,3],[1,[[5,[3,4]]]],[[1,2],1],[[[3,[[0,[6,7]]]]],[[3,[[0,[6,7]]]]]],[1,1],[8,8],[4,4],[9,9],[10,10],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],8],[[1,11],1],[4,12],[[1,2],1],[[[3,[7]],13],[[14,[10]]]],[10,11],[[8,8],2],[[10,10],2],[[[3,[7]],13],[[14,[10]]]],[[[3,[7]]],[[15,[7]]]],[[[3,[7]]],[[16,[7]]]],[[[3,[[0,[17,7]]]],18],19],[[[15,[[0,[17,7]]]],18],19],[[[16,[[0,[17,7]]]],18],19],[[[20,[17,[0,[17,7]]]],18],19],[[1,18],19],[[8,18],19],[[4,18],19],[[4,18],19],[[9,18],19],[[10,18],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[10],[[[3,[7]]],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,2],[[[3,[7]],13],2],[4,9],[10,11],[[[3,[7]]],8],[[1,8],1],[[],11],[[[3,[7]]],11],[[],3],[[],1],[[],3],[[[15,[7]]],[[14,[10]]]],[[[16,[7]]],[[14,[10]]]],[[[20,[21,7]]],[[14,[[22,[10]]]]]],0,[10,11],[[[3,[7]]],11],[[1,2],1],[[1,2],1],[23],[[[3,[7]],12],24],[[[3,[7]]],[[26,[25]]]],[[[3,[7]],12,24]],[[[3,[7]],26]],[10,11],[[[3,[7]],21],[[20,[21,7]]]],[[[3,[7]]],22],[[[3,[7]]],22],[[[3,[7]]],2],[[[3,[7]]],2],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],11],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],0,0,0,0,0,0,0,0,0,0,[[28,13],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,[[14,[29]]]],[30,28],[31,31],[30,30],[28,28],[29,29],[[]],[[]],[[]],[[]],[[],31],[[],30],[[],28],[[31,31],2],[28,28],[[29,13],[[14,[10]]]],[[29,13,11],[[14,[10]]]],[29,32],[[31,18],19],[[30,18],19],[[28,18],19],[[29,18],19],[[32,18],19],[[]],[[]],[[]],[[]],[[]],[29,11],[[]],[[]],[[]],[[]],[[]],[[]],[[30,31],30],[29,31],[29,11],[[],30],[[],28],[[],[[14,[29]]]],[32,[[14,[10]]]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],27],[[],27],[[],27],[[],27],[[],27]],"p":[[3,"AhoCorasickBuilder"],[15,"bool"],[3,"AhoCorasick"],[3,"Error"],[4,"Result"],[8,"Clone"],[8,"StateID"],[4,"MatchKind"],[4,"ErrorKind"],[3,"Match"],[15,"usize"],[15,"str"],[8,"AsRef"],[4,"Option"],[3,"FindIter"],[3,"FindOverlappingIter"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"StreamFindIter"],[8,"Read"],[6,"Result"],[3,"Demand"],[3,"String"],[15,"u8"],[3,"Vec"],[3,"TypeId"],[3,"Builder"],[3,"Searcher"],[3,"Config"],[4,"MatchKind"],[3,"FindIter"],[13,"StateIDOverflow"],[13,"PremultiplyOverflow"]]},\
"anyhow":{"doc":"github crates-io docs-rs","t":"DIDFGOLLOLLLLLLLKLLLLLLLLOLLCLLLLLLLLLLLLLLLLLLLLLLLLK","n":["Chain","Context","Error","Ok","Result","anyhow","as_ref","as_ref","bail","borrow","borrow","borrow_mut","borrow_mut","chain","clone","clone_into","context","context","default","deref","deref_mut","downcast","downcast_mut","downcast_ref","drop","ensure","fmt","fmt","format_err","from","from","from","from","into","into","into_iter","is","len","msg","new","new","next","next_back","root_cause","size_hint","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_context"],"q":["anyhow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Iterator of a chain of source errors.","Provides the <code>context</code> method for <code>Result</code>.","The <code>Error</code> type, a wrapper around a dynamic error type.","Equivalent to Ok::&lt;_, anyhow::Error&gt;(value).","<code>Result&lt;T, Error&gt;</code>","Construct an ad-hoc error from a string or existing non-…","","","Return early with an error.","","","","","An iterator of the chain of source errors contained by …","","","Wrap the error value with additional context.","Wrap the error value with additional context.","","","","Attempt to downcast the error object to a concrete type.","Downcast this error object by mutable reference.","Downcast this error object by reference.","","Return early with an error if a condition is not satisfied.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if <code>E</code> is the type held by this error object.","","Create a new error object from a printable error message.","Create a new error object from any error type.","","","","The lowest level cause of this error — this error’s …","","","","","","","","","","Wrap the error value with additional context that is …"],"i":[0,0,0,0,0,0,2,2,0,2,4,2,4,2,4,4,14,2,4,2,2,2,2,2,2,0,2,2,0,2,2,2,4,2,4,4,2,4,2,2,4,4,4,2,4,4,2,2,4,2,4,2,4,14],"f":[0,0,0,[[],1],0,0,[2,3],[2,3],0,[[]],[[]],[[]],[[]],[2,4],[4,4],[[]],[[],[[1,[2]]]],[2,2],[[],4],[2],[2],[2,[[5,[2]]]],[2,6],[2,6],[2],0,[[2,7],8],[[2,7],8],0,[9],[[],2],[[]],[[]],[[]],[[]],[[]],[2,10],[4,11],[[],2],[[],2],[3,4],[4,6],[4,6],[2,3],[4],[[]],[[],12],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[],[[1,[2]]]]],"p":[[6,"Result"],[3,"Error"],[8,"Error"],[3,"Chain"],[4,"Result"],[4,"Option"],[3,"Formatter"],[6,"Result"],[15,"never"],[15,"bool"],[15,"usize"],[3,"String"],[3,"TypeId"],[8,"Context"]]},\
"argtool":{"doc":"Simple and functional argparse","t":"CCCCAADEENNNNNNLMMLLLLLLLLLMMLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLDLMLLLMLLLLLLLMLLLLLL","n":["ArgGroup","ArgItem","ArgType","ArgValue","argitem","argroup","ArgItem","ArgType","ArgValue","BaseType","FlagType","ListType","PositionalType","STR","VEC","add_alias","alias","arg_type","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","detail","fmt","from","from","from","get_bool","get_f32","get_i32","get_string","get_vec","into","into","into","name","new","required","set_argtype","set_default","set_detail","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ArgGroup","add_arg","arg_map","borrow","borrow_mut","default","discription","from","get_bool","get_f32","get_i32","get_string","get_vec","into","name","new","parse","to_string","try_from","try_into","type_id"],"q":["argtool","","","","","","argtool::argitem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argtool::argroup","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","struct for one argument An example","enum for argtype There are four argument type can be used. …","","BaseType:","FlagType","ListType:","PositionalType:","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","create a new argument","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,13,13,13,13,3,3,1,1,1,13,1,3,13,1,3,3,3,1,1,1,3,13,1,3,3,3,3,3,3,13,1,3,1,1,1,1,1,1,3,13,1,3,13,1,3,13,1,3,13,1,3,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[[]],[[],1],0,0,[[3,4],5],[[]],[[]],[[]],[3,[[8,[6,7]]]],[3,[[8,[9,7]]]],[3,[[8,[10,7]]]],[3,[[8,[11,7]]]],[3,[[8,[[12,[11]],7]]]],[[]],[[]],[[]],0,[[2,2],1],0,[[1,13],1],[[1,2,6],1],[[1,2],1],[[]],[[],11],[[],11],[[],11],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],14],[[],14],[[],14],0,[[15,1],[[8,[7]]]],0,[[]],[[]],[[],15],0,[[]],[[15,2],[[8,[6,7]]]],[[15,2],[[8,[9,7]]]],[[15,2],[[8,[10,7]]]],[[15,2],[[8,[11,7]]]],[[15,2],[[8,[[12,[11]],7]]]],[[]],0,[[11,11],15],[[15,16],[[8,[[17,[11,3]],7]]]],[[],11],[[],8],[[],8],[[],14]],"p":[[3,"ArgItem"],[15,"str"],[4,"ArgValue"],[3,"Formatter"],[6,"Result"],[15,"bool"],[3,"Error"],[4,"Result"],[15,"f32"],[15,"i32"],[3,"String"],[3,"Vec"],[4,"ArgType"],[3,"TypeId"],[3,"ArgGroup"],[8,"Iterator"],[3,"HashMap"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"p":[]},\
"crossbeam":{"doc":"Tools for concurrent programming.","t":"AFOAAADIQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLNNNNNNDDDDDEDDDDEDNNDDEDEFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFNDNEDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSDDGIDDQDDIIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLFLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLKLLLFLLLLLLMLLLFLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["atomic","scope","select","sync","thread","utils","AtomicCell","AtomicConsume","Val","as_ptr","borrow","borrow_mut","compare_and_swap","compare_exchange","default","deref","deref_mut","drop","drop","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_update","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","from","from","from","init","into","into_inner","is_lock_free","load","load_consume","new","store","swap","take","try_from","try_into","type_id","Disconnected","Disconnected","Disconnected","Disconnected","Empty","Full","IntoIter","Iter","ReadyTimeoutError","Receiver","RecvError","RecvTimeoutError","Select","SelectTimeoutError","SelectedOperation","SendError","SendTimeoutError","Sender","Timeout","Timeout","TryIter","TryReadyError","TryRecvError","TrySelectError","TrySendError","after","at","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded","capacity","capacity","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","index","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","is_disconnected","is_disconnected","is_disconnected","is_disconnected","is_empty","is_empty","is_empty","is_full","is_full","is_full","is_timeout","is_timeout","iter","len","len","never","new","next","next","next","provide","provide","provide","provide","provide","provide","provide","provide","ready","ready_deadline","ready_timeout","recv","recv","recv","recv_deadline","recv_timeout","remove","same_channel","same_channel","select","select","select_deadline","select_timeout","send","send","send","send_deadline","send_timeout","tick","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_iter","try_ready","try_recv","try_select","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbounded","Empty","Injector","Retry","Steal","Stealer","Success","Worker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","init","init","init","init","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_retry","is_success","len","len","len","new","new_fifo","new_lifo","or_else","pop","push","push","steal","steal","steal_batch","steal_batch","steal_batch_and_pop","steal_batch_and_pop","steal_batch_with_limit","steal_batch_with_limit","steal_batch_with_limit_and_pop","steal_batch_with_limit_and_pop","stealer","success","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ALIGN","Atomic","Collector","CompareAndSetError","CompareAndSetOrdering","CompareExchangeError","Guard","Init","LocalHandle","Owned","Pointable","Pointer","Shared","as_mut","as_raw","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","collector","collector","compare_and_set","compare_and_set_weak","compare_exchange","compare_exchange_weak","current","default","default","default","default_collector","defer","defer_destroy","defer_unchecked","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","failure","fetch_and","fetch_or","fetch_update","fetch_xor","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_usize","from_usize","from_usize","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_box","into_owned","into_owned","into_shared","into_usize","into_usize","into_usize","is_null","is_pinned","is_pinned","load","load_consume","new","new","new","new","null","null","partial_cmp","pin","pin","register","repin","repin_after","store","success","swap","tag","tag","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_owned","try_into_owned","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unprotected","with_tag","with_tag","ArrayQueue","SegQueue","borrow","borrow","borrow_mut","borrow_mut","capacity","default","deref","deref","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","force_push","from","from","init","init","into","into","into_iter","into_iter","is_empty","is_empty","is_full","len","len","new","new","pop","pop","push","push","try_from","try_from","try_into","try_into","type_id","type_id","Parker","ShardedLock","ShardedLockReadGuard","ShardedLockWriteGuard","Unparker","WaitGroup","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw","from_raw","get_mut","init","init","init","init","init","init","into","into","into","into","into","into","into_inner","into_raw","into_raw","is_poisoned","new","new","new","park","park_deadline","park_timeout","read","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unparker","wait","write","Scope","ScopedJoinHandle","ScopedThreadBuilder","as_pthread_t","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_pthread_t","join","name","scope","spawn","spawn","stack_size","thread","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Backoff","CachePadded","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","eq","fmt","fmt","from","from","from","from","hash","init","init","into","into","into_inner","is_completed","new","new","reset","snooze","spin","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["crossbeam","","","","","","crossbeam::atomic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam::channelcrossbeam::deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam::epochcrossbeam::queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam::thread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Atomic types.","Creates a new scope for spawning threads.","Selects from a set of channel operations.","Thread synchronization primitives.","Threads that can borrow variables from the stack.","Miscellaneous utilities.","A thread-safe mutable memory location.","Trait which allows reading from primitive atomic types …","Type returned by <code>load_consume</code>.","Returns a raw pointer to the underlying data in this …","","","If the current value equals <code>current</code>, stores <code>new</code> into the …","If the current value equals <code>current</code>, stores <code>new</code> into the …","","","","","","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies logical “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies logical “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies logical “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Fetches the value, and applies a function to it that …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies logical “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","Returns <code>true</code> if operations on values of this type are …","Loads a value from the atomic cell.","Loads a value from the atomic using a “consume” memory …","Creates a new atomic cell initialized with <code>val</code>.","Stores <code>val</code> into the atomic cell.","Stores <code>val</code> into the atomic cell and returns the previous …","Takes the value of the atomic cell, leaving …","","","","The message could not be sent because the channel is …","The message could not be sent because the channel is …","The message could not be received because the channel is …","The message could not be received because the channel is …","A message could not be received because the channel is …","The message could not be sent because the channel is full.","A blocking iterator over messages in a channel.","A blocking iterator over messages in a channel.","An error returned from the <code>ready_timeout</code> method.","The receiving side of a channel.","An error returned from the <code>recv</code> method.","An error returned from the <code>recv_timeout</code> method.","Selects from a set of channel operations.","An error returned from the <code>select_timeout</code> method.","A selected operation that needs to be completed.","An error returned from the <code>send</code> method.","An error returned from the <code>send_timeout</code> method.","The sending side of a channel.","The message could not be sent because the channel is full …","A message could not be received because the channel is …","A non-blocking iterator over messages in a channel.","An error returned from the <code>try_ready</code> method.","An error returned from the <code>try_recv</code> method.","An error returned from the <code>try_select</code> method.","An error returned from the <code>try_send</code> method.","Creates a receiver that delivers a message after a certain …","Creates a receiver that delivers a message at a certain …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a channel of bounded capacity.","If the channel is bounded, returns its capacity.","If the channel is bounded, returns its capacity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the index of the selected operation.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps the message.","Unwraps the message.","Unwraps the message.","","","","","","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation timed out.","Returns <code>true</code> if the receive operation timed out.","A blocking iterator over messages in the channel.","Returns the number of messages in the channel.","Returns the number of messages in the channel.","Creates a receiver that never delivers messages.","Creates an empty list of channel operations for selection.","","","","","","","","","","","","Blocks until one of the operations becomes ready.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is received or …","Adds a receive operation.","Completes the receive operation.","Waits for a message to be received from the channel, but …","Waits for a message to be received from the channel, but …","Removes a previously added operation.","Returns <code>true</code> if senders belong to the same channel.","Returns <code>true</code> if receivers belong to the same channel.","Blocks until one of the operations becomes ready and …","Selects from a set of channel operations.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is sent or the …","Adds a send operation.","Completes the send operation.","Waits for a message to be sent into the channel, but only …","Waits for a message to be sent into the channel, but only …","Creates a receiver that delivers messages periodically.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A non-blocking iterator over messages in the channel.","Attempts to find a ready operation without blocking.","Attempts to receive a message from the channel without …","Attempts to select one of the operations without blocking.","Attempts to send a message into the channel without …","","","","","","","","","","","","","","","","","","Creates a channel of unbounded capacity.","The queue was empty at the time of stealing.","An injector queue.","The steal operation needs to be retried.","Possible outcomes of a steal operation.","A stealer handle of a worker queue.","At least one task was successfully stolen.","A worker queue.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Consumes items until a <code>Success</code> is found and returns it.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue was empty at the time of …","Returns <code>true</code> if the steal operation needs to be retried.","Returns <code>true</code> if at least one task was stolen.","Returns the number of tasks in the deque.","Returns the number of tasks in the deque.","Returns the number of tasks in the queue.","Creates a new injector queue.","Creates a FIFO worker queue.","Creates a LIFO worker queue.","If no task was stolen, attempts another steal operation.","Pops a task from the queue.","Pushes a task into the queue.","Pushes a task into the queue.","Steals a task from the queue.","Steals a task from the queue.","Steals a batch of tasks and pushes them into another …","Steals a batch of tasks and pushes them into a worker.","Steals a batch of tasks, pushes them into another worker, …","Steals a batch of tasks, pushes them into a worker, and …","Steals no more than <code>limit</code> of tasks and pushes them into …","Steals no more than of tasks and pushes them into a worker.","Steals no more than <code>limit</code> of tasks, pushes them into …","Steals no more than <code>limit</code> of tasks, pushes them into a …","Creates a stealer for this queue.","Returns the result of the operation, if successful.","","","","","","","","","","","","","","","The alignment of pointer.","An atomic pointer that can be safely shared between …","An epoch-based garbage collector.","The error returned on failed compare-and-set operation.","Memory orderings for compare-and-set operations.","The error returned on failed compare-and-swap operation.","A guard that keeps the current thread pinned.","The type for initializers.","A handle to a garbage collector.","An owned heap-allocated object.","Types that are pointed to by a single word.","A trait for either <code>Owned</code> or <code>Shared</code> pointers.","A pointer to an object protected by the epoch GC.","","Converts the pointer to a raw pointer (without the tag).","","Converts the pointer to a reference.","","","","","","","","","","","","","","","","","Returns a copy of the atomic value.","","","Creates another reference to the same garbage collector.","","","","","","Returns the <code>Collector</code> associated with this handle.","Returns the <code>Collector</code> associated with this guard.","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","The value in the atomic pointer at the time of the failed …","","","","Returns the default global collector.","Stores a function so that it can be executed at some point …","Stores a destructor for an object so that it can be …","Stores a function so that it can be executed at some point …","Dereferences the given pointer.","","","","","","Dereferences the pointer.","","","","Mutably dereferences the given pointer.","","","","","Dereferences the pointer.","","","","","Drops the object pointed to by the given pointer.","","","","","","","","","","","","Checks if both handles point to the same collector.","The ordering of the operation when it fails.","Bitwise “and” with the current tag.","Bitwise “or” with the current tag.","Fetches the pointer, and then applies a function to it …","Bitwise “xor” with the current tag.","Clears up the thread-local cache of deferred functions by …","","","","","","","","","","Returns the argument unchanged.","Returns a new atomic pointer pointing to <code>raw</code>.","","","Returns a new atomic pointer pointing to <code>owned</code>.","Returns a new atomic pointer pointing to <code>ptr</code>.","Returns the argument unchanged.","","","","Returns a new owned pointer pointing to <code>b</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a new pointer pointing to <code>raw</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a new owned pointer pointing to <code>raw</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","","Initializes a with the given initializer.","","Allocates <code>value</code> on the heap and returns a new atomic …","","","Allocates <code>value</code> on the heap and returns a new owned …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the owned pointer into a <code>Box</code>.","Takes ownership of the pointee.","Takes ownership of the pointee.","Converts the owned pointer into a <code>Shared</code>.","Returns the machine representation of the pointer.","","","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if the current thread is pinned.","Returns <code>true</code> if the handle is pinned.","Loads a <code>Shared</code> from the atomic pointer.","Loads a <code>Shared</code> from the atomic pointer using a “consume…","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Creates a new collector.","The new value, which the operation failed to store.","Returns a new null atomic pointer.","Returns a new null pointer.","","Pins the current thread.","Pins the handle.","Registers a new handle for the collector.","Unpins and then immediately re-pins the thread.","Temporarily unpins the thread, executes the given function …","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.","The ordering of the operation when it succeeds.","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …","Returns the tag stored within the pointer.","Returns the tag stored within the pointer.","","","","","","","","","","","","","","","","","","","Takes ownership of the pointee if it is non-null.","Takes ownership of the pointee if it is not null.","","","","","","","","Returns a reference to a dummy guard that allows …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","A bounded multi-producer multi-consumer queue.","An unbounded multi-producer multi-consumer queue.","","","","","Returns the capacity of the queue.","","","","","","","","","","","","Pushes an element into the queue, replacing the oldest …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is full.","Returns the number of elements in the queue.","Returns the number of elements in the queue.","Creates a new bounded queue with the given capacity.","Creates a new unbounded queue.","Attempts to pop an element from the queue.","Pops an element from the queue.","Attempts to push an element into the queue.","Pushes an element into the queue.","","","","","","","A thread parking primitive.","A sharded reader-writer lock.","A guard used to release the shared read access of a …","A guard used to release the exclusive write access of a …","Unparks a thread parked by the associated <code>Parker</code>.","Enables threads to synchronize the beginning or end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a raw pointer into a <code>Parker</code>.","Converts a raw pointer into an <code>Unparker</code>.","Returns a mutable reference to the underlying data.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this lock, returning the underlying data.","Converts a <code>Parker</code> into a raw pointer.","Converts an <code>Unparker</code> into a raw pointer.","Returns <code>true</code> if the lock is poisoned.","Creates a new <code>Parker</code>.","Creates a new sharded reader-writer lock.","Creates a new wait group and returns the single reference …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Locks with shared read access, blocking the current thread …","","","","","","","","","","","","","","","","","Attempts to acquire this lock with shared read access.","Attempts to acquire this lock with exclusive write access.","","","","","","","Atomically makes the token available if it is not already.","Returns a reference to an associated <code>Unparker</code>.","Drops this reference and waits until all other references …","Locks with exclusive write access, blocking the current …","A scope for spawning threads.","A handle that can be used to join its scoped thread.","Configures the properties of a new thread.","","","","","","","","Creates a builder that can configure a thread before …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Waits for the thread to finish and returns its result.","Sets the name for the new thread.","Creates a new scope for spawning threads.","Spawns a scoped thread.","Spawns a scoped thread with this configuration.","Sets the size of the stack for the new thread.","Returns a handle to the underlying thread.","","","","","","","","","","Performs exponential backoff in spin loops.","Pads and aligns a value to the length of a cache line.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner value.","Returns <code>true</code> if exponential backoff has completed and …","Creates a new <code>Backoff</code>.","Pads and aligns a value to the length of a cache line.","Resets the <code>Backoff</code>.","Backs off in a blocking loop.","Backs off in a lock-free loop.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,75,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,75,5,5,5,5,5,5,5,30,31,33,34,33,30,0,0,0,0,0,0,0,0,0,0,0,0,31,34,0,0,0,0,0,0,0,26,25,40,41,42,28,39,29,30,31,32,33,34,35,36,37,38,26,25,40,41,42,28,39,29,30,31,32,33,34,35,36,37,38,0,26,25,26,25,28,29,30,31,32,33,34,35,36,37,38,26,25,28,29,30,31,32,33,34,35,36,37,38,28,26,25,40,41,42,28,39,29,30,31,32,33,34,35,36,37,38,26,25,40,41,42,28,39,29,30,31,32,33,34,35,36,37,38,26,26,25,25,40,41,42,28,39,39,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,26,25,40,41,42,28,39,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,38,26,25,40,41,42,28,39,29,30,30,31,31,32,33,33,34,34,35,36,37,38,39,26,25,40,41,42,28,39,29,30,31,32,33,34,35,36,37,38,26,25,40,41,42,28,39,29,30,31,32,33,34,35,36,37,38,29,30,31,25,25,40,41,42,30,31,33,34,26,25,33,26,25,30,31,34,25,26,25,0,28,40,41,42,29,30,31,32,33,34,35,36,28,28,28,25,28,39,25,25,28,26,25,28,0,28,28,26,28,39,26,26,0,26,25,28,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,26,25,40,41,42,28,39,29,30,31,32,33,34,35,36,37,38,26,25,40,41,42,28,39,29,30,31,32,33,34,35,36,37,38,25,28,25,28,26,26,25,40,41,42,28,39,29,30,31,32,33,34,35,36,37,38,0,46,0,46,0,0,46,0,48,45,47,46,48,45,47,46,45,46,45,46,47,48,45,47,46,48,45,47,46,48,45,47,47,46,46,48,45,47,46,48,45,47,46,46,48,45,47,46,48,45,47,46,48,45,47,46,46,46,48,45,47,47,48,48,46,48,48,47,45,47,45,47,45,47,45,47,45,47,48,46,45,46,48,45,47,46,48,45,47,46,48,45,47,46,76,0,0,0,0,0,0,76,0,0,0,0,0,49,50,49,50,56,51,49,49,50,52,54,55,56,51,49,49,50,52,54,55,51,49,50,52,51,49,50,52,50,54,55,51,51,51,51,56,51,50,52,0,55,55,55,76,56,51,49,49,50,50,52,54,55,76,56,51,49,49,50,50,52,54,55,76,56,51,49,49,50,52,54,54,55,55,50,52,77,51,51,51,51,55,56,51,51,49,50,50,52,54,55,56,51,51,51,51,51,51,51,49,49,49,49,50,50,52,54,55,49,78,49,50,76,56,51,51,49,49,50,52,54,55,56,51,49,50,52,54,55,49,51,50,49,78,49,50,50,0,54,51,51,51,49,52,56,51,50,50,0,54,52,55,55,51,77,51,49,50,51,49,50,52,56,51,49,50,52,54,55,56,51,49,50,52,54,55,51,50,56,51,49,50,52,54,55,0,49,50,0,0,58,59,58,59,58,59,58,59,58,59,58,58,59,59,58,59,58,58,59,58,59,58,59,58,59,58,59,58,58,59,58,59,58,59,58,59,58,59,58,59,58,59,0,0,0,0,0,0,62,60,63,61,64,65,62,60,63,61,64,65,60,61,60,61,62,63,61,62,60,63,61,64,64,65,65,62,60,63,61,64,65,65,62,60,63,61,61,64,65,65,62,60,63,61,64,64,65,65,62,60,63,63,63,61,64,65,62,60,63,62,60,63,61,64,65,62,60,63,61,64,65,63,62,60,63,62,63,61,62,62,62,63,60,61,64,65,62,60,63,61,64,65,62,60,63,61,64,65,63,63,62,60,63,61,64,65,60,62,61,63,0,0,0,68,69,68,70,69,68,70,69,69,68,70,69,68,70,69,68,70,69,68,70,69,68,70,69,68,70,69,68,70,68,68,70,0,69,70,70,68,69,68,70,69,68,70,69,68,70,0,0,74,73,74,73,73,73,74,73,74,73,73,74,73,73,74,73,73,74,73,74,73,73,73,73,74,73,74,73,73,74,74,73,74,74,74,73,74,73,74,73,74,73],"f":[0,[[],[[4,[[3,[1,2]]]]]],0,0,0,0,0,0,0,[5],[[]],[[]],[5],[5,4],[[],5],[6],[6],[5],[6],[[[5,[6]],6],6],[[[5,[7]],7],7],[[[5,[8]],8],8],[[[5,[9]],9],9],[[[5,[10]],10],10],[[[5,[11]],11],11],[[[5,[12]],12],12],[[[5,[13]],13],13],[[[5,[14]],14],14],[[[5,[15]],15],15],[[[5,[16]],16],16],[[[5,[17]],17],17],[[[5,[16]],16],16],[[[5,[13]],13],13],[[[5,[17]],17],17],[[[5,[18]],18],18],[[[5,[10]],10],10],[[[5,[6]],6],6],[[[5,[14]],14],14],[[[5,[7]],7],7],[[[5,[8]],8],8],[[[5,[11]],11],11],[[[5,[12]],12],12],[[[5,[9]],9],9],[[[5,[15]],15],15],[[[5,[10]],10],10],[[[5,[7]],7],7],[[[5,[16]],16],16],[[[5,[8]],8],8],[[[5,[12]],12],12],[[[5,[9]],9],9],[[[5,[15]],15],15],[[[5,[17]],17],17],[[[5,[14]],14],14],[[[5,[6]],6],6],[[[5,[13]],13],13],[[[5,[11]],11],11],[[[5,[17]],17],17],[[[5,[12]],12],12],[[[5,[11]],11],11],[[[5,[8]],8],8],[[[5,[15]],15],15],[[[5,[14]],14],14],[[[5,[7]],7],7],[[[5,[9]],9],9],[[[5,[6]],6],6],[[[5,[16]],16],16],[[[5,[13]],13],13],[[[5,[10]],10],10],[[[5,[6]],6],6],[[[5,[17]],17],17],[[[5,[14]],14],14],[[[5,[10]],10],10],[[[5,[16]],16],16],[[[5,[13]],13],13],[[[5,[18]],18],18],[[[5,[12]],12],12],[[[5,[7]],7],7],[[[5,[9]],9],9],[[[5,[8]],8],8],[[[5,[15]],15],15],[[[5,[11]],11],11],[[[5,[11]],11],11],[[[5,[14]],14],14],[[[5,[6]],6],6],[[[5,[8]],8],8],[[[5,[9]],9],9],[[[5,[18]],18],18],[[[5,[13]],13],13],[[[5,[10]],10],10],[[[5,[15]],15],15],[[[5,[16]],16],16],[[[5,[7]],7],7],[[[5,[17]],17],17],[[[5,[12]],12],12],[[[5,[13]],13],13],[[[5,[11]],11],11],[[[5,[17]],17],17],[[[5,[9]],9],9],[[[5,[12]],12],12],[[[5,[14]],14],14],[[[5,[6]],6],6],[[[5,[10]],10],10],[[[5,[16]],16],16],[[[5,[7]],7],7],[[[5,[15]],15],15],[[[5,[8]],8],8],[5,4],[[[5,[12]],12],12],[[[5,[13]],13],13],[[[5,[16]],16],16],[[[5,[11]],11],11],[[[5,[14]],14],14],[[[5,[17]],17],17],[[[5,[10]],10],10],[[[5,[18]],18],18],[[[5,[9]],9],9],[[[5,[8]],8],8],[[[5,[7]],7],7],[[[5,[15]],15],15],[[[5,[6]],6],6],[[5,19],[[4,[20]]]],[21],[[],5],[[]],[[],6],[[]],[5],[[],18],[5],[[]],[[],5],[5],[5],[5],[[],4],[[],4],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[23,[[25,[24]]]],[24,[[25,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[26,[[27,[6]]]],[25,[[27,[6]]]],[26,26],[25,25],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[26],[6],[6],[25],[6],[6],[6],[6],[6],[39],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[29,29],18],[[30,30],18],[[31,31],18],[[32,32],18],[[33,33],18],[[34,34],18],[[35,35],18],[[36,36],18],[[37,37],18],[[38,38],18],[[26,19],[[4,[20]]]],[[25,19],[[4,[20]]]],[[40,19],[[4,[20]]]],[[41,19],[[4,[20]]]],[[42,19],[[4,[20]]]],[[28,19],[[4,[20]]]],[[39,19],[[4,[20]]]],[[29,19],[[4,[20]]]],[[29,19],[[4,[20]]]],[[30,19],[[4,[20]]]],[[30,19],[[4,[20]]]],[[31,19],[[4,[20]]]],[[31,19],[[4,[20]]]],[[32,19],[[4,[20]]]],[[32,19],[[4,[20]]]],[[33,19],[[4,[20]]]],[[33,19],[[4,[20]]]],[[34,19],[[4,[20]]]],[[34,19],[[4,[20]]]],[[35,19],[[4,[20]]]],[[35,19],[[4,[20]]]],[[36,19],[[4,[20]]]],[[36,19],[[4,[20]]]],[[37,19],[[4,[20]]]],[[38,19],[[4,[20]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,30],[[]],[29,31],[[]],[[]],[32,33],[32,34],[[]],[[]],[[]],[[]],[[]],[39,6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29],[30],[31],[25],[25],[[]],[[]],[[]],[30,18],[31,18],[33,18],[34,18],[26,18],[25,18],[33,18],[26,18],[25,18],[30,18],[31,18],[34,18],[25,40],[26,6],[25,6],[[],25],[[],28],[40,27],[41,27],[42,27],[43],[43],[43],[43],[43],[43],[43],[43],[28,6],[[28,24],[[4,[6,38]]]],[[28,23],[[4,[6,38]]]],[25,[[4,[32]]]],[[28,25],6],[[39,25],[[4,[32]]]],[[25,24],[[4,[34]]]],[[25,23],[[4,[34]]]],[[28,6]],[[26,26],18],[[25,25],18],[28,39],0,[[28,24],[[4,[39,36]]]],[[28,23],[[4,[39,36]]]],[26,[[4,[29]]]],[[28,26],6],[[39,26],[[4,[29]]]],[[26,24],[[4,[31]]]],[[26,23],[[4,[31]]]],[23,[[25,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[25,41],[28,[[4,[6,37]]]],[25,[[4,[33]]]],[28,[[4,[39,35]]]],[26,[[4,[30]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[45,45],[46,46],[[]],[[]],[[],47],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[47],[6],[[46,46],18],[[48,19],[[4,[20]]]],[[45,19],[[4,[20]]]],[[47,19],[[4,[20]]]],[[46,19],[[4,[20]]]],[[]],[[]],[[]],[[]],[[],46],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[48,18],[45,18],[47,18],[46,18],[46,18],[46,18],[48,6],[45,6],[47,6],[[],47],[[],48],[[],48],[46,46],[48,27],[48],[47],[45,46],[47,46],[[45,48],46],[[47,48],46],[[45,48],46],[[47,48],46],[[45,48,6],46],[[47,48,6],46],[[45,48,6],46],[[47,48,6],46],[48,45],[46,27],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],22],[[],22],[[],22],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,[49],[50],[49],[50,27],[[]],[[]],[[]],[49],[[]],[[]],[[]],[[]],[[]],[[]],[49],[[]],[[]],[[]],[[]],[[]],[51,51],[49,49],[50,50],[52,52],[[]],[[]],[[]],[[]],[[50,50],53],[54,52],[55,[[27,[52]]]],[[51,50,55],[[4,[50,56]]]],[[51,50,55],[[4,[50,56]]]],[[51,50,57,57,55],[[4,[50,56]]]],[[51,50,57,57,55],[[4,[50,56]]]],0,[[],51],[[],50],[[],52],[[],52],[55],[[55,50]],[55],[6],[6],[6],[6],[49],[6],[50],[6],[6],[6],[6],[6],[6],[49],[6],[50],[6],[6],[6],[6],[6],[6],[6],[6],[49],[6],[6],[54],[6],[6],[55],[[50,50],18],[[52,52],18],[[],57],[[51,6,57,55],50],[[51,6,57,55],50],[[51,57,57,55],[[4,[50,50]]]],[[51,6,57,55],50],[55],[[56,19],[[4,[20]]]],[[51,19],[[4,[20]]]],[[51,19],[[4,[20]]]],[[49,19],[[4,[20]]]],[[50,19],[[4,[20]]]],[[50,19],[[4,[20]]]],[[52,19],[[4,[20]]]],[[54,19],[[4,[20]]]],[[55,19],[[4,[20]]]],[[]],[[],51],[[],51],[[[3,[2]]],51],[49,51],[50,51],[[]],[21],[[],49],[21],[[[3,[2]]],49],[[]],[[]],[[],50],[[]],[[]],[[]],[[],49],[6],[6,49],[6,50],[[],6],[[],6],[[],51],[[],6],[[],6],[[],49],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[49,[[3,[2]]]],[51,49],[50,49],[[49,55],50],[[],6],[49,6],[50,6],[50,18],[[],18],[54,18],[[51,57,55],50],[[51,55],50],[[],51],[[],49],[[],52],0,[[],51],[[],50],[[50,50],[[27,[53]]]],[[],55],[54,55],[52,54],[55],[55],[[51,57]],[[],57],[[51,57,55],50],[49,6],[50,6],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[51,[[27,[49]]]],[50,[[27,[49]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],55],[[49,6],49],[[50,6],50],0,0,[[]],[[]],[[]],[[]],[58,6],[[],59],[6],[6],[6],[6],[6],[58],[6],[59],[[58,19],[[4,[20]]]],[[59,19],[[4,[20]]]],[58,27],[[]],[[]],[[],6],[[],6],[[]],[[]],[58],[59],[58,18],[59,18],[58,18],[58,6],[59,6],[6,58],[[],59],[58,27],[59,27],[58,4],[59],[[],4],[[],4],[[],4],[[],4],[[],22],[[],22],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[60,60],[61,61],[[]],[[]],[[],62],[[],63],[[],61],[6],[6],[6],[6],[64],[6],[65],[6],[6],[6],[6],[6],[6],[6],[65],[6],[6],[6],[61],[6],[6],[65],[6],[[62,19],[[4,[20]]]],[[60,19],[[4,[20]]]],[[63,19],[[4,[20]]]],[[61,19],[[4,[20]]]],[[64,19],[[4,[20]]]],[[64,19],[[4,[20]]]],[[65,19],[[4,[20]]]],[[65,19],[[4,[20]]]],[[]],[[]],[21],[[],63],[[]],[[]],[[]],[[]],[[],62],[[],60],[63,[[4,[66]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[63,[[4,[66]]]],[62],[60],[63,18],[[],62],[[],63],[[],61],[62],[[62,24]],[[62,23]],[63,[[4,[64,[66,[64]]]]]],[[]],[[]],[[],44],[[],44],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[63,[[4,[64,[67,[64]]]]]],[63,[[4,[65,[67,[65]]]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[60],[62,60],[61],[63,[[4,[65,[66,[65]]]]]],0,0,0,[68,6],[[]],[[]],[[]],[[]],[[]],[[]],[69,70],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[69,19],[[4,[20]]]],[[68,19],[[4,[20]]]],[[70,19],[[4,[20]]]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[]],[[]],[[]],[68,6],[68,[[4,[[3,[1,2]]]]]],[[70,44],70],[[],[[4,[[3,[1,2]]]]]],[69,68],[70,[[4,[68,71]]]],[[70,6],70],[68,72],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],22],[[],22],[[],22],0,0,[[]],[[]],[[]],[[]],[73,73],[[]],[[],74],[[],73],[6],[6],[73],[6],[6],[73],[6],[6],[[73,73],18],[[74,19],[[4,[20]]]],[[73,19],[[4,[20]]]],[[]],[[],73],[[]],[21],[73],[[],6],[[],6],[[]],[[]],[73],[74,18],[[],74],[[],73],[74],[74],[74],[[]],[[],4],[[],4],[[],4],[[],4],[[],22],[[],22]],"p":[[8,"Any"],[3,"Global"],[3,"Box"],[4,"Result"],[3,"AtomicCell"],[15,"usize"],[15,"u16"],[15,"isize"],[15,"u8"],[15,"i8"],[15,"i128"],[15,"i16"],[15,"u128"],[15,"i32"],[15,"i64"],[15,"u64"],[15,"u32"],[15,"bool"],[3,"Formatter"],[3,"Error"],[15,"never"],[3,"TypeId"],[3,"Duration"],[3,"Instant"],[3,"Receiver"],[3,"Sender"],[4,"Option"],[3,"Select"],[3,"SendError"],[4,"TrySendError"],[4,"SendTimeoutError"],[3,"RecvError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[3,"TrySelectError"],[3,"SelectTimeoutError"],[3,"TryReadyError"],[3,"ReadyTimeoutError"],[3,"SelectedOperation"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"Demand"],[3,"String"],[3,"Stealer"],[4,"Steal"],[3,"Injector"],[3,"Worker"],[3,"Owned"],[3,"Shared"],[3,"Atomic"],[3,"Collector"],[4,"Ordering"],[3,"LocalHandle"],[3,"Guard"],[3,"CompareExchangeError"],[4,"Ordering"],[3,"ArrayQueue"],[3,"SegQueue"],[3,"Unparker"],[3,"WaitGroup"],[3,"Parker"],[3,"ShardedLock"],[3,"ShardedLockReadGuard"],[3,"ShardedLockWriteGuard"],[3,"PoisonError"],[4,"TryLockError"],[3,"ScopedJoinHandle"],[3,"Scope"],[3,"ScopedThreadBuilder"],[3,"Error"],[3,"Thread"],[3,"CachePadded"],[3,"Backoff"],[8,"AtomicConsume"],[8,"Pointable"],[8,"CompareAndSetOrdering"],[8,"Pointer"]]},\
"crossbeam_channel":{"doc":"Multi-producer multi-consumer channels for message passing.","t":"NNNNNNDDDDDEDDDDEDNNDDEDEFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLF","n":["Disconnected","Disconnected","Disconnected","Disconnected","Empty","Full","IntoIter","Iter","ReadyTimeoutError","Receiver","RecvError","RecvTimeoutError","Select","SelectTimeoutError","SelectedOperation","SendError","SendTimeoutError","Sender","Timeout","Timeout","TryIter","TryReadyError","TryRecvError","TrySelectError","TrySendError","after","at","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded","capacity","capacity","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","is_disconnected","is_disconnected","is_disconnected","is_disconnected","is_empty","is_empty","is_empty","is_full","is_full","is_full","is_timeout","is_timeout","iter","len","len","never","new","next","next","next","provide","provide","provide","provide","provide","provide","provide","provide","ready","ready_deadline","ready_timeout","recv","recv","recv","recv_deadline","recv_timeout","remove","same_channel","same_channel","select","select","select_deadline","select_timeout","send","send","send","send_deadline","send_timeout","tick","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_iter","try_ready","try_recv","try_select","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbounded"],"q":["crossbeam_channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The message could not be sent because the channel is …","The message could not be sent because the channel is …","The message could not be received because the channel is …","The message could not be received because the channel is …","A message could not be received because the channel is …","The message could not be sent because the channel is full.","A blocking iterator over messages in a channel.","A blocking iterator over messages in a channel.","An error returned from the <code>ready_timeout</code> method.","The receiving side of a channel.","An error returned from the <code>recv</code> method.","An error returned from the <code>recv_timeout</code> method.","Selects from a set of channel operations.","An error returned from the <code>select_timeout</code> method.","A selected operation that needs to be completed.","An error returned from the <code>send</code> method.","An error returned from the <code>send_timeout</code> method.","The sending side of a channel.","The message could not be sent because the channel is full …","A message could not be received because the channel is …","A non-blocking iterator over messages in a channel.","An error returned from the <code>try_ready</code> method.","An error returned from the <code>try_recv</code> method.","An error returned from the <code>try_select</code> method.","An error returned from the <code>try_send</code> method.","Creates a receiver that delivers a message after a certain …","Creates a receiver that delivers a message at a certain …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a channel of bounded capacity.","If the channel is bounded, returns its capacity.","If the channel is bounded, returns its capacity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the index of the selected operation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps the message.","Unwraps the message.","Unwraps the message.","","","","","","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation timed out.","Returns <code>true</code> if the receive operation timed out.","A blocking iterator over messages in the channel.","Returns the number of messages in the channel.","Returns the number of messages in the channel.","Creates a receiver that never delivers messages.","Creates an empty list of channel operations for selection.","","","","","","","","","","","","Blocks until one of the operations becomes ready.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is received or …","Adds a receive operation.","Completes the receive operation.","Waits for a message to be received from the channel, but …","Waits for a message to be received from the channel, but …","Removes a previously added operation.","Returns <code>true</code> if senders belong to the same channel.","Returns <code>true</code> if receivers belong to the same channel.","Blocks until one of the operations becomes ready and …","Selects from a set of channel operations.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is sent or the …","Adds a send operation.","Completes the send operation.","Waits for a message to be sent into the channel, but only …","Waits for a message to be sent into the channel, but only …","Creates a receiver that delivers messages periodically.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A non-blocking iterator over messages in the channel.","Attempts to find a ready operation without blocking.","Attempts to receive a message from the channel without …","Attempts to select one of the operations without blocking.","Attempts to send a message into the channel without …","","","","","","","","","","","","","","","","","","Creates a channel of unbounded capacity."],"i":[10,11,13,14,13,10,0,0,0,0,0,0,0,0,0,0,0,0,11,14,0,0,0,0,0,0,0,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,0,5,3,5,3,7,9,10,11,12,13,14,15,16,17,18,5,3,7,9,10,11,12,13,14,15,16,17,18,7,5,3,19,9,10,11,12,13,14,15,16,17,18,5,3,24,25,26,7,19,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,18,5,3,24,25,26,7,19,9,10,10,11,11,12,13,13,14,14,15,16,17,18,19,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,9,10,11,3,3,24,25,26,10,11,13,14,5,3,13,5,3,10,11,14,3,5,3,0,7,24,25,26,9,10,11,12,13,14,15,16,7,7,7,3,7,19,3,3,7,5,3,7,0,7,7,5,7,19,5,5,0,5,3,7,9,10,11,12,13,14,15,16,17,18,9,10,11,12,13,14,15,16,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,3,7,3,7,5,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[2,[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[5,[[6,[4]]]],[3,[[6,[4]]]],[5,5],[3,3],[7,7],[[[9,[8]]],[[9,[8]]]],[[[10,[8]]],[[10,[8]]]],[[[11,[8]]],[[11,[8]]]],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[5],[3],[19],[[[9,[20]],9],21],[[[10,[20]],10],21],[[[11,[20]],11],21],[[12,12],21],[[13,13],21],[[14,14],21],[[15,15],21],[[16,16],21],[[17,17],21],[[18,18],21],[[5,22],23],[[3,22],23],[[24,22],23],[[25,22],23],[[26,22],23],[[7,22],23],[[19,22],23],[[9,22],23],[[9,22],23],[[10,22],23],[[10,22],23],[[11,22],23],[[11,22],23],[[12,22],23],[[12,22],23],[[13,22],23],[[13,22],23],[[14,22],23],[[14,22],23],[[15,22],23],[[15,22],23],[[16,22],23],[[16,22],23],[[17,22],23],[[18,22],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,10],[9,11],[[]],[[]],[12,13],[[]],[12,14],[[]],[[]],[[]],[[]],[[]],[19,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[10],[11],[3],[3],[[]],[[]],[[]],[10,21],[11,21],[13,21],[14,21],[5,21],[3,21],[13,21],[5,21],[3,21],[10,21],[11,21],[14,21],[3,24],[5,4],[3,4],[[],3],[[],7],[24,6],[25,6],[26,6],[27],[27],[27],[27],[27],[27],[27],[27],[7,4],[[7,2],[[28,[4,18]]]],[[7,1],[[28,[4,18]]]],[3,[[28,[12]]]],[[7,3],4],[[19,3],[[28,[12]]]],[[3,2],[[28,[14]]]],[[3,1],[[28,[14]]]],[[7,4]],[[5,5],21],[[3,3],21],[7,19],0,[[7,2],[[28,[19,16]]]],[[7,1],[[28,[19,16]]]],[5,[[28,[9]]]],[[7,5],4],[[19,5],[[28,[9]]]],[[5,2],[[28,[11]]]],[[5,1],[[28,[11]]]],[1,[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[3,25],[7,[[28,[4,17]]]],[3,[[28,[13]]]],[7,[[28,[19,15]]]],[5,[[28,[10]]]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]]],"p":[[3,"Duration"],[3,"Instant"],[3,"Receiver"],[15,"usize"],[3,"Sender"],[4,"Option"],[3,"Select"],[8,"Clone"],[3,"SendError"],[4,"TrySendError"],[4,"SendTimeoutError"],[3,"RecvError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[3,"TrySelectError"],[3,"SelectTimeoutError"],[3,"TryReadyError"],[3,"ReadyTimeoutError"],[3,"SelectedOperation"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"Demand"],[4,"Result"],[3,"String"],[3,"TypeId"]]},\
"crossbeam_deque":{"doc":"Concurrent work-stealing deques.","t":"NDNEDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Empty","Injector","Retry","Steal","Stealer","Success","Worker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","init","init","init","init","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_retry","is_success","len","len","len","new","new_fifo","new_lifo","or_else","pop","push","push","steal","steal","steal_batch","steal_batch","steal_batch_and_pop","steal_batch_and_pop","steal_batch_with_limit","steal_batch_with_limit","steal_batch_with_limit_and_pop","steal_batch_with_limit_and_pop","stealer","success","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["crossbeam_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The queue was empty at the time of stealing.","An injector queue.","The steal operation needs to be retried.","Possible outcomes of a steal operation.","A stealer handle of a worker queue.","At least one task was successfully stolen.","A worker queue.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Consumes items until a <code>Success</code> is found and returns it.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue was empty at the time of …","Returns <code>true</code> if the steal operation needs to be retried.","Returns <code>true</code> if at least one task was stolen.","Returns the number of tasks in the deque.","Returns the number of tasks in the deque.","Returns the number of tasks in the queue.","Creates a new injector queue.","Creates a FIFO worker queue.","Creates a LIFO worker queue.","If no task was stolen, attempts another steal operation.","Pops a task from the queue.","Pushes a task into the queue.","Pushes a task into the queue.","Steals a task from the queue.","Steals a task from the queue.","Steals a batch of tasks and pushes them into another …","Steals a batch of tasks and pushes them into a worker.","Steals a batch of tasks, pushes them into another worker, …","Steals a batch of tasks, pushes them into a worker, and …","Steals no more than <code>limit</code> of tasks and pushes them into …","Steals no more than of tasks and pushes them into a worker.","Steals no more than <code>limit</code> of tasks, pushes them into …","Steals no more than <code>limit</code> of tasks, pushes them into a …","Creates a stealer for this queue.","Returns the result of the operation, if successful.","","","","","","","","","","","","","",""],"i":[3,0,3,0,0,3,0,8,1,4,3,8,1,4,3,1,3,1,3,4,8,1,4,3,8,1,4,3,8,1,4,4,3,3,8,1,4,3,8,1,4,3,3,8,1,4,3,8,1,4,3,8,1,4,3,3,3,8,1,4,4,8,8,3,8,8,4,1,4,1,4,1,4,1,4,1,4,8,3,1,3,8,1,4,3,8,1,4,3,8,1,4,3],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[[3,[2]]],[[3,[2]]]],[[]],[[]],[[],4],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[4],[5],[5],[[[3,[6]],3],7],[[8,9],10],[[1,9],10],[[4,9],10],[[3,9],10],[[]],[[]],[[]],[[]],[[],3],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[8,7],[1,7],[4,7],[3,7],[3,7],[3,7],[8,5],[1,5],[4,5],[[],4],[[],8],[[],8],[3,3],[8,11],[8],[4],[1,3],[4,3],[[1,8],3],[[4,8],3],[[1,8],3],[[4,8],3],[[1,8,5],3],[[4,8,5],3],[[1,8,5],3],[[4,8,5],3],[8,1],[3,11],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13]],"p":[[3,"Stealer"],[8,"Clone"],[4,"Steal"],[3,"Injector"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[3,"Worker"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"crossbeam_epoch":{"doc":"Epoch-based memory reclamation.","t":"SDDGIDDQDDIIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLFLLLKLLKLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLKLLLFLLLLLLMLLLFLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLL","n":["ALIGN","Atomic","Collector","CompareAndSetError","CompareAndSetOrdering","CompareExchangeError","Guard","Init","LocalHandle","Owned","Pointable","Pointer","Shared","as_mut","as_raw","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","collector","collector","compare_and_set","compare_and_set_weak","compare_exchange","compare_exchange_weak","current","default","default","default","default_collector","defer","defer_destroy","defer_unchecked","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","failure","fetch_and","fetch_or","fetch_update","fetch_xor","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_usize","from_usize","from_usize","init","init","init","into","into","into","into","into","into","into","into_box","into_owned","into_owned","into_shared","into_usize","into_usize","into_usize","is_null","is_pinned","is_pinned","load","load_consume","new","new","new","new","null","null","partial_cmp","pin","pin","register","repin","repin_after","store","success","swap","tag","tag","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_owned","try_into_owned","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unprotected","with_tag","with_tag"],"q":["crossbeam_epochd":["The alignment of pointer.","An atomic pointer that can be safely shared between …","An epoch-based garbage collector.","The error returned on failed compare-and-set operation.","Memory orderings for compare-and-set operations.","The error returned on failed compare-and-swap operation.","A guard that keeps the current thread pinned.","The type for initializers.","A handle to a garbage collector.","An owned heap-allocated object.","Types that are pointed to by a single word.","A trait for either <code>Owned</code> or <code>Shared</code> pointers.","A pointer to an object protected by the epoch GC.","","Converts the pointer to a raw pointer (without the tag).","","Converts the pointer to a reference.","","","","","","","","","","","","","","","","","Returns a copy of the atomic value.","","","Creates another reference to the same garbage collector.","","","","","","Returns the <code>Collector</code> associated with this handle.","Returns the <code>Collector</code> associated with this guard.","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","The value in the atomic pointer at the time of the failed …","","","","Returns the default global collector.","Stores a function so that it can be executed at some point …","Stores a destructor for an object so that it can be …","Stores a function so that it can be executed at some point …","Dereferences the given pointer.","","Dereferences the pointer.","Mutably dereferences the given pointer.","","Dereferences the pointer.","Drops the object pointed to by the given pointer.","","","","","Checks if both handles point to the same collector.","The ordering of the operation when it fails.","Bitwise “and” with the current tag.","Bitwise “or” with the current tag.","Fetches the pointer, and then applies a function to it …","Bitwise “xor” with the current tag.","Clears up the thread-local cache of deferred functions by …","","","","","","","","","","Returns the argument unchanged.","Returns a new atomic pointer pointing to <code>owned</code>.","","Returns a new atomic pointer pointing to <code>ptr</code>.","Returns a new atomic pointer pointing to <code>raw</code>.","","","Returns the argument unchanged.","Returns a new owned pointer pointing to <code>b</code>.","","","Returns the argument unchanged.","Returns a new pointer pointing to <code>raw</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a new owned pointer pointing to <code>raw</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","","Initializes a with the given initializer.","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the owned pointer into a <code>Box</code>.","Takes ownership of the pointee.","Takes ownership of the pointee.","Converts the owned pointer into a <code>Shared</code>.","Returns the machine representation of the pointer.","","","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if the current thread is pinned.","Returns <code>true</code> if the handle is pinned.","Loads a <code>Shared</code> from the atomic pointer.","Loads a <code>Shared</code> from the atomic pointer using a “consume…","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Creates a new collector.","The new value, which the operation failed to store.","Returns a new null atomic pointer.","Returns a new null pointer.","","Pins the current thread.","Pins the handle.","Registers a new handle for the collector.","Unpins and then immediately re-pins the thread.","Temporarily unpins the thread, executes the given function …","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.","The ordering of the operation when it succeeds.","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …","Returns the tag stored within the pointer.","Returns the tag stored within the pointer.","","","","","","","","","","","","","","","","","","","Takes ownership of the pointee if it is non-null.","Takes ownership of the pointee if it is not null.","","","","","","","","Returns a reference to a dummy guard that allows …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …"],"i":[2,0,0,0,0,0,0,2,0,0,0,0,0,3,4,3,4,15,6,3,3,4,8,10,11,15,6,3,3,4,8,10,11,6,3,4,8,6,3,4,8,4,10,11,6,6,6,6,15,6,4,8,0,11,11,11,2,3,4,2,3,4,2,3,10,11,4,8,25,6,6,6,6,11,15,6,6,3,4,4,8,10,11,15,6,6,6,6,6,6,6,3,3,3,3,4,4,8,10,11,3,18,3,4,2,6,3,15,6,3,4,8,10,11,3,6,4,3,18,3,4,4,0,10,6,6,6,3,8,15,6,4,4,0,10,8,11,11,6,25,6,3,4,6,3,4,8,15,6,3,4,8,10,11,15,6,3,4,8,10,11,6,4,15,6,3,4,8,10,11,0,3,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]]]],[4],[[[3,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],5],[[]],[[]],[[[3,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[[[6,[[0,[1,2]]]]],[[6,[[0,[1,2]]]]]],[[[3,[7]]],[[3,[7]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[8,8],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],9],[10,8],[11,[[5,[8]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],11],[[13,[[4,[[0,[1,2]]]],[12,[[0,[1,2]]]]]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],11],[[13,[[4,[[0,[1,2]]]],[12,[[0,[1,2]]]]]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],14,14,11],[[13,[[4,[[0,[1,2]]]],[15,[[0,[1,2]]]]]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],14,14,11],[[13,[[4,[[0,[1,2]]]],[15,[[0,[1,2]]]]]]]],0,[[],[[6,[[0,[1,2]]]]]],[[],[[4,[[0,[1,2]]]]]],[[],8],[[],8],[11],[[11,4]],[11],[16],[[[3,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[16],[[[3,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[16],[[[3,[[0,[1,2]]]]]],[10],[11],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],17],[[8,8],17],[[],14],[[[6,[[0,[1,2]]]],16,14,11],[[4,[[0,[1,2]]]]]],[[[6,[[0,[1,2]]]],16,14,11],[[4,[[0,[1,2]]]]]],[[[6,[[0,[1,2]]]],14,14,11],[[13,[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]]]]],[[[6,[[0,[1,2]]]],16,14,11],[[4,[[0,[1,2]]]]]],[11],[[[15,[[0,[18,19]]]],20],21],[[[6,[[0,[1,2]]]],20],21],[[[6,[[0,[1,2]]]],20],21],[[[3,[[0,[1,2]]]],20],21],[[[4,[[0,[1,2]]]],20],21],[[[4,[[0,[1,2]]]],20],21],[[8,20],21],[[10,20],21],[[11,20],21],[[]],[[[3,[[0,[1,2]]]]],[[6,[[0,[1,2]]]]]],[22],[[[4,[[0,[1,2]]]]],[[6,[[0,[1,2]]]]]],[[],6],[23,6],[[],6],[[]],[23,3],[[],3],[22],[[]],[[],4],[[]],[[]],[[]],[[]],[[],3],[16],[16,[[3,[[0,[1,2]]]]]],[16,[[4,[[0,[1,2]]]]]],[[],16],[[],[[6,[[0,[1,2]]]]]],[[],[[3,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,23],[[[6,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],11],[[4,[[0,[1,2]]]]]],[[],16],[[[3,[[0,[1,2]]]]],16],[[[4,[[0,[1,2]]]]],16],[[[4,[[0,[1,2]]]]],17],[[],17],[10,17],[[[6,[[0,[1,2]]]],14,11],[[4,[[0,[1,2]]]]]],[[[6,[[0,[1,2]]]],11],[[4,[[0,[1,2]]]]]],[[],6],[[],3],[[],8],0,[[],[[6,[[0,[1,2]]]]]],[[],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[5,[9]]]],[[],11],[10,11],[8,10],[11],[11],[[[6,[[0,[1,2]]]],[18,[[0,[1,2]]]],14]],[[],14],[[[6,[[0,[1,2]]]],[18,[[0,[1,2]]]],14,11],[[4,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],16],[[[4,[[0,[1,2]]]]],16],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[[6,[[0,[1,2]]]]],[[5,[[3,[[0,[1,2]]]]]]]],[[[4,[[0,[1,2]]]]],[[5,[[3,[[0,[1,2]]]]]]]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],11],[[[3,[[0,[1,2]]]],16],[[3,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],16],[[4,[[0,[1,2]]]]]]],"p":[[8,"Sized"],[8,"Pointable"],[3,"Owned"],[3,"Shared"],[4,"Option"],[3,"Atomic"],[8,"Clone"],[3,"Collector"],[4,"Ordering"],[3,"LocalHandle"],[3,"Guard"],[6,"CompareAndSetError"],[4,"Result"],[4,"Ordering"],[3,"CompareExchangeError"],[15,"usize"],[15,"bool"],[8,"Pointer"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"never"],[3,"Box"],[3,"TypeId"],[8,"CompareAndSetOrdering"]]},\
"crossbeam_queue":{"doc":"Concurrent queues.","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ArrayQueue","SegQueue","borrow","borrow","borrow_mut","borrow_mut","capacity","default","drop","drop","fmt","fmt","force_push","from","from","into","into","into_iter","into_iter","is_empty","is_empty","is_full","len","len","new","new","pop","pop","push","push","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["crossbeam_queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A bounded multi-producer multi-consumer queue.","An unbounded multi-producer multi-consumer queue.","","","","","Returns the capacity of the queue.","","","","","","Pushes an element into the queue, replacing the oldest …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is full.","Returns the number of elements in the queue.","Returns the number of elements in the queue.","Creates a new bounded queue with the given capacity.","Creates a new unbounded queue.","Attempts to pop an element from the queue.","Pops an element from the queue.","Attempts to push an element into the queue.","Pushes an element into the queue.","","","","","",""],"i":[0,0,1,3,1,3,1,3,1,3,1,3,1,1,3,1,3,1,3,1,3,1,1,3,1,3,1,3,1,3,1,3,1,3,1,3],"f":[0,0,[[]],[[]],[[]],[[]],[1,2],[[],3],[1],[3],[[1,4],5],[[3,4],5],[1,6],[[]],[[]],[[]],[[]],[1],[3],[1,7],[3,7],[1,7],[1,2],[3,2],[2,1],[[],3],[1,6],[3,6],[1,8],[3],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9]],"p":[[3,"ArrayQueue"],[15,"usize"],[3,"SegQueue"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"crossbeam_utils":{"doc":"Miscellaneous tools for concurrent programming.","t":"DDALLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLDIQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLL","n":["Backoff","CachePadded","atomic","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","from","from","from","from","hash","into","into","into_inner","is_completed","new","new","reset","snooze","spin","sync","thread","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AtomicCell","AtomicConsume","Val","as_ptr","borrow","borrow_mut","compare_and_swap","compare_exchange","default","drop","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_update","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","from","from","from","into","into_inner","is_lock_free","load","load_consume","new","store","swap","take","try_from","try_into","type_id","Parker","ShardedLock","ShardedLockReadGuard","ShardedLockWriteGuard","Unparker","WaitGroup","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","deref","deref","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw","from_raw","get_mut","into","into","into","into","into","into","into_inner","into_raw","into_raw","is_poisoned","new","new","new","park","park_deadline","park_timeout","read","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unparker","wait","write","Scope","ScopedJoinHandle","ScopedThreadBuilder","as_pthread_t","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","fmt","fmt","fmt","from","from","from","into","into","into","into_pthread_t","join","name","scope","spawn","spawn","stack_size","thread","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["crossbeam_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::atomic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::thread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Performs exponential backoff in spin loops.","Pads and aligns a value to the length of a cache line.","Atomic types.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner value.","Returns <code>true</code> if exponential backoff has completed and …","Creates a new <code>Backoff</code>.","Pads and aligns a value to the length of a cache line.","Resets the <code>Backoff</code>.","Backs off in a blocking loop.","Backs off in a lock-free loop.","Thread synchronization primitives.","Threads that can borrow variables from the stack.","","","","","","","","A thread-safe mutable memory location.","Trait which allows reading from primitive atomic types …","Type returned by <code>load_consume</code>.","Returns a raw pointer to the underlying data in this …","","","If the current value equals <code>current</code>, stores <code>new</code> into the …","If the current value equals <code>current</code>, stores <code>new</code> into the …","","","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies logical “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies logical “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies logical “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Fetches the value, and applies a function to it that …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies logical “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","Returns <code>true</code> if operations on values of this type are …","Loads a value from the atomic cell.","Loads a value from the atomic using a “consume” memory …","Creates a new atomic cell initialized with <code>val</code>.","Stores <code>val</code> into the atomic cell.","Stores <code>val</code> into the atomic cell and returns the previous …","Takes the value of the atomic cell, leaving …","","","","A thread parking primitive.","A sharded reader-writer lock.","A guard used to release the shared read access of a …","A guard used to release the exclusive write access of a …","Unparks a thread parked by the associated <code>Parker</code>.","Enables threads to synchronize the beginning or end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a raw pointer into a <code>Parker</code>.","Converts a raw pointer into an <code>Unparker</code>.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this lock, returning the underlying data.","Converts a <code>Parker</code> into a raw pointer.","Converts an <code>Unparker</code> into a raw pointer.","Returns <code>true</code> if the lock is poisoned.","Creates a new <code>Parker</code>.","Creates a new sharded reader-writer lock.","Creates a new wait group and returns the single reference …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Locks with shared read access, blocking the current thread …","","","","","","","","","","","","","","","","","Attempts to acquire this lock with shared read access.","Attempts to acquire this lock with exclusive write access.","","","","","","","Atomically makes the token available if it is not already.","Returns a reference to an associated <code>Unparker</code>.","Drops this reference and waits until all other references …","Locks with exclusive write access, blocking the current …","A scope for spawning threads.","A handle that can be used to join its scoped thread.","Configures the properties of a new thread.","","","","","","","","Creates a builder that can configure a thread before …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Waits for the thread to finish and returns its result.","Sets the name for the new thread.","Creates a new scope for spawning threads.","Spawns a scoped thread.","Spawns a scoped thread with this configuration.","Sets the size of the stack for the new thread.","Returns a handle to the underlying thread.","","","","","","","","",""],"i":[0,0,0,3,2,3,2,2,2,3,2,2,2,2,3,2,3,2,2,2,2,3,2,2,3,3,2,3,3,3,0,0,2,3,2,3,2,3,2,0,0,49,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,49,14,14,14,14,14,14,14,0,0,0,0,0,0,31,29,32,30,34,35,31,29,32,30,34,35,29,30,29,30,31,32,30,34,35,35,30,35,31,29,32,30,34,34,35,35,31,29,32,32,32,30,34,35,31,29,32,31,29,32,30,34,35,32,31,29,32,31,32,30,31,31,31,32,29,30,34,35,31,29,32,30,34,35,31,29,32,30,34,35,32,32,31,29,32,30,34,35,29,31,30,32,0,0,0,42,44,42,45,44,42,45,44,44,42,45,44,42,45,44,42,45,42,42,45,0,44,45,45,42,44,42,45,44,42,45,44,42,45],"f":[0,0,0,[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[],3],[[],[[2,[4]]]],[2],[2],[[[2,[5]],2],6],[[3,7],8],[[[2,[9]],7],8],[[]],[[]],[[],2],[10],[[[2,[11]]]],[[]],[[]],[2],[3,6],[[],3],[[],2],[3],[3],[3],0,0,[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,[14],[[]],[[]],[[[14,[[0,[15,16]]]],[0,[15,16]],[0,[15,16]]],[[0,[15,16]]]],[[[14,[[0,[15,16]]]],[0,[15,16]],[0,[15,16]]],[[12,[[0,[15,16]],[0,[15,16]]]]]],[[],[[14,[4]]]],[14],[[[14,[17]],17],17],[[[14,[18]],18],18],[[[14,[19]],19],19],[[[14,[20]],20],20],[[[14,[21]],21],21],[[[14,[22]],22],22],[[[14,[23]],23],23],[[[14,[24]],24],24],[[[14,[25]],25],25],[[[14,[26]],26],26],[[[14,[27]],27],27],[[[14,[28]],28],28],[[[14,[17]],17],17],[[[14,[24]],24],24],[[[14,[27]],27],27],[[[14,[28]],28],28],[[[14,[26]],26],26],[[[14,[22]],22],22],[[[14,[21]],21],21],[[[14,[20]],20],20],[[[14,[18]],18],18],[[[14,[25]],25],25],[[[14,[23]],23],23],[[[14,[6]],6],6],[[[14,[19]],19],19],[[[14,[17]],17],17],[[[14,[26]],26],26],[[[14,[19]],19],19],[[[14,[27]],27],27],[[[14,[18]],18],18],[[[14,[24]],24],24],[[[14,[22]],22],22],[[[14,[23]],23],23],[[[14,[28]],28],28],[[[14,[20]],20],20],[[[14,[25]],25],25],[[[14,[21]],21],21],[[[14,[23]],23],23],[[[14,[21]],21],21],[[[14,[26]],26],26],[[[14,[27]],27],27],[[[14,[25]],25],25],[[[14,[24]],24],24],[[[14,[28]],28],28],[[[14,[20]],20],20],[[[14,[22]],22],22],[[[14,[19]],19],19],[[[14,[17]],17],17],[[[14,[18]],18],18],[[[14,[26]],26],26],[[[14,[20]],20],20],[[[14,[6]],6],6],[[[14,[25]],25],25],[[[14,[19]],19],19],[[[14,[17]],17],17],[[[14,[27]],27],27],[[[14,[22]],22],22],[[[14,[24]],24],24],[[[14,[23]],23],23],[[[14,[28]],28],28],[[[14,[21]],21],21],[[[14,[18]],18],18],[[[14,[20]],20],20],[[[14,[25]],25],25],[[[14,[18]],18],18],[[[14,[28]],28],28],[[[14,[21]],21],21],[[[14,[19]],19],19],[[[14,[22]],22],22],[[[14,[17]],17],17],[[[14,[26]],26],26],[[[14,[27]],27],27],[[[14,[6]],6],6],[[[14,[24]],24],24],[[[14,[23]],23],23],[[[14,[20]],20],20],[[[14,[27]],27],27],[[[14,[28]],28],28],[[[14,[26]],26],26],[[[14,[22]],22],22],[[[14,[24]],24],24],[[[14,[25]],25],25],[[[14,[23]],23],23],[[[14,[17]],17],17],[[[14,[18]],18],18],[[[14,[19]],19],19],[[[14,[21]],21],21],[[[14,[[0,[15,16]]]]],[[12,[[0,[15,16]],[0,[15,16]]]]]],[[[14,[24]],24],24],[[[14,[23]],23],23],[[[14,[20]],20],20],[[[14,[6]],6],6],[[[14,[17]],17],17],[[[14,[21]],21],21],[[[14,[19]],19],19],[[[14,[22]],22],22],[[[14,[27]],27],27],[[[14,[28]],28],28],[[[14,[18]],18],18],[[[14,[26]],26],26],[[[14,[25]],25],25],[[[14,[[0,[15,9]]]],7],8],[[]],[10],[[],14],[[]],[14],[[],6],[[[14,[15]]],15],[[]],[[],14],[14],[14],[[[14,[4]]],4],[[],12],[[],12],[[],13],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,29],[30,30],[[]],[[]],[[],31],[[],[[32,[4]]]],[[],30],[[[34,[33]]]],[[[35,[33]]]],[[[35,[33]]]],[30],[[[35,[33]]]],[[31,7],8],[[29,7],8],[[[32,[[0,[33,9]]]],7],8],[[30,7],8],[[[34,[9]],7],8],[[[34,[[0,[33,36]]]],7],8],[[[35,[9]],7],8],[[[35,[[0,[33,36]]]],7],8],[[]],[[]],[[],32],[[]],[10],[[]],[[]],[[]],[[],31],[[],29],[[[32,[33]]],37],[[]],[[]],[[]],[[]],[[]],[[]],[32,37],[31],[29],[[[32,[33]]],6],[[],31],[[],32],[[],30],[31],[[31,38]],[[31,39]],[[[32,[33]]],[[37,[[34,[33]]]]]],[[]],[[]],[[],40],[[],40],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[[32,[33]]],[[41,[[34,[33]]]]]],[[[32,[33]]],[[41,[[35,[33]]]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[29],[31,29],[30],[[[32,[33]]],[[37,[[35,[33]]]]]],0,0,0,[42,43],[[]],[[]],[[]],[[]],[[]],[[]],[44,45],[[44,7],8],[[42,7],8],[[45,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[42,43],[42,46],[[45,40],45],[[],46],[44,42],[45,[[47,[42]]]],[[45,25],45],[42,48],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13]],"p":[[8,"Clone"],[3,"CachePadded"],[3,"Backoff"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"never"],[8,"Hash"],[4,"Result"],[3,"TypeId"],[3,"AtomicCell"],[8,"Copy"],[8,"Eq"],[15,"u16"],[15,"u8"],[15,"i64"],[15,"i8"],[15,"u128"],[15,"u64"],[15,"i128"],[15,"i16"],[15,"usize"],[15,"u32"],[15,"isize"],[15,"i32"],[3,"Unparker"],[3,"WaitGroup"],[3,"Parker"],[3,"ShardedLock"],[8,"Sized"],[3,"ShardedLockReadGuard"],[3,"ShardedLockWriteGuard"],[8,"Display"],[6,"LockResult"],[3,"Instant"],[3,"Duration"],[3,"String"],[6,"TryLockResult"],[3,"ScopedJoinHandle"],[6,"RawPthread"],[3,"Scope"],[3,"ScopedThreadBuilder"],[6,"Result"],[6,"Result"],[3,"Thread"],[8,"AtomicConsume"]]},\
"glob":{"doc":"Support for matching file paths against Unix shell style …","t":"DGDDDDLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLMLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLL","n":["GlobError","GlobResult","MatchOptions","Paths","Pattern","PatternError","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case_sensitive","cause","clone","clone","clone_into","clone_into","cmp","cmp","default","default","description","description","eq","eq","error","escape","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","glob","glob_with","hash","hash","into","into","into","into","into","into_error","into_iter","matches","matches_path","matches_path_with","matches_with","msg","new","new","next","partial_cmp","partial_cmp","path","pos","provide","provide","require_literal_leading_dot","require_literal_separator","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["glob","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A glob iteration error.","An alias for a glob iteration result.","Configuration options to modify the behaviour of …","An iterator that yields <code>Path</code>s from the filesystem that …","A compiled Unix shell style pattern.","A pattern parsing error.","Access the original glob pattern.","","","","","","","","","","","Whether or not patterns should be matched in a …","","","","","","","","","","","","","","The error in question.","Escape metacharacters within the given string by …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return an iterator that produces all the <code>Path</code>s that match …","Return an iterator that produces all the <code>Path</code>s that match …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes self, returning the <em>raw</em> underlying <code>io::Error</code>","","Return if the given <code>str</code> matches this <code>Pattern</code> using the …","Return if the given <code>Path</code>, when converted to a <code>str</code>, matches …","Return if the given <code>Path</code>, when converted to a <code>str</code>, matches …","Return if the given <code>str</code> matches this <code>Pattern</code> using the …","A message describing the error.","This function compiles Unix shell style patterns.","Constructs a new <code>MatchOptions</code> with default field values. …","","","","The Path that the error corresponds to.","The approximate character index of where the error …","","","Whether or not paths that contain components that start …","Whether or not path-component separator characters (e.g. <code>/</code> …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,12,3,8,1,6,12,3,8,1,6,6,3,1,6,1,6,1,6,1,6,3,8,1,6,3,1,12,3,3,8,8,1,1,6,12,3,8,1,6,1,0,0,1,6,12,3,8,1,6,3,12,1,1,1,1,8,1,6,12,1,6,3,8,3,8,6,6,1,6,3,8,1,12,3,8,1,6,12,3,8,1,6,12,3,8,1,6],"f":[0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3,[[5,[4]]]],[1,1],[6,6],[[]],[[]],[[1,1],7],[[6,6],7],[[],1],[[],6],[3,2],[8,2],[[1,1],9],[[6,6],9],[3,10],[2,11],[[12,13],14],[[3,13],14],[[3,13],14],[[8,13],14],[[8,13],14],[[1,13],14],[[1,13],14],[[6,13],14],[[]],[[]],[[]],[[]],[[]],[2,[[15,[1,8]]]],[2,[[15,[12,8]]]],[[2,6],[[15,[12,8]]]],[1],[6],[[]],[[]],[[]],[[]],[[]],[3,10],[[]],[[1,2],9],[[1,16],9],[[1,16,6],9],[[1,2,6],9],0,[2,[[15,[1,8]]]],[[],6],[12,[[5,[17]]]],[[1,1],[[5,[7]]]],[[6,6],[[5,[7]]]],[3,16],0,[18],[18],0,0,[[]],[[]],[[],11],[[],11],[[],11],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],19],[[],19],[[],19],[[],19],[[],19]],"p":[[3,"Pattern"],[15,"str"],[3,"GlobError"],[8,"Error"],[4,"Option"],[3,"MatchOptions"],[4,"Ordering"],[3,"PatternError"],[15,"bool"],[3,"Error"],[3,"String"],[3,"Paths"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"Path"],[6,"GlobResult"],[3,"Demand"],[3,"TypeId"]]},\
"memchr":{"doc":"This library provides heavily optimized routines for …","t":"DDDLLLLLLLLLLLLLLLFFFFFFAFFFFFFLLLLLLLLLLLLLLLLLLLLLNDDDDDNELLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLL","n":["Memchr","Memchr2","Memchr3","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","into_iter","into_iter","into_iter","memchr","memchr2","memchr2_iter","memchr3","memchr3_iter","memchr_iter","memmem","memrchr","memrchr2","memrchr2_iter","memrchr3","memrchr3_iter","memrchr_iter","new","new","new","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Auto","FindIter","FindRevIter","Finder","FinderBuilder","FinderRev","None","Prefilter","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_forward","build_reverse","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","find","find","find_iter","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","needle","needle","new","new","new","next","next","prefilter","rfind","rfind","rfind_iter","rfind_iter","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["memchr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","memchr::memmem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator for <code>memchr</code>.","An iterator for <code>memchr2</code>.","An iterator for <code>memchr3</code>.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Search for the first occurrence of a byte in a slice.","Like <code>memchr</code>, but searches for either of two bytes instead …","An iterator over all occurrences of the needles in a …","Like <code>memchr</code>, but searches for any of three bytes instead …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needle in a …","This module provides forward and reverse substring search …","Search for the last occurrence of a byte in a slice.","Like <code>memrchr</code>, but searches for either of two bytes instead …","An iterator over all occurrences of the needles in a …","Like <code>memrchr</code>, but searches for any of three bytes instead …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needle in a …","Creates a new iterator that yields all positions of needle …","Creates a new iterator that yields all positions of needle …","Create a new <code>Memchr3</code> that’s initialized to zero with a …","","","","","","","","","","","","","","","","","","","Automatically detect whether a heuristic prefilter should …","An iterator over non-overlapping substring matches.","An iterator over non-overlapping substring matches in …","A single substring searcher fixed to a particular needle.","A builder for constructing non-default forward or reverse …","A single substring reverse searcher fixed to a particular …","Never used a prefilter in substring search.","Prefilter controls whether heuristics are used to …","Convert this finder into its borrowed variant.","Convert this finder into its borrowed variant.","","","","","","","","","","","","","Build a forward finder using the given needle from the …","Build a reverse finder using the given needle from the …","","","","","","","","","","","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of this needle …","Returns an iterator over all non-overlapping occurrences …","Returns an iterator over all occurrences of a substring in …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Convert this iterator into its owned variant, such that it …","Convert this iterator into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Returns the needle that this finder searches for.","Returns the needle that this finder searches for.","Create a new finder for the given needle.","Create a new reverse finder for the given needle.","Create a new finder builder with default settings.","","","Configure the prefilter setting for the finder.","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of this needle in …","Returns a reverse iterator over all non-overlapping …","Returns a reverse iterator over all occurrences of a …","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,13,0,0,0,0,0,13,0,10,11,13,14,17,10,11,12,13,14,17,10,11,12,12,12,13,10,11,12,13,10,11,12,13,12,0,10,0,10,13,14,17,10,11,12,13,14,17,10,11,12,13,14,17,10,11,12,14,17,14,17,10,11,10,11,10,11,12,14,17,12,0,11,0,11,13,10,11,12,13,14,17,10,11,12,13,14,17,10,11,12,13,14,17,10,11,12],"f":[0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[[1,1],[[3,[2]]]],[[1,1],4],[[1,1,1],[[3,[2]]]],[[1,1,1],5],[1,6],0,[1,[[3,[2]]]],[[1,1],[[3,[2]]]],[[1,1],[[7,[4]]]],[[1,1,1],[[3,[2]]]],[[1,1,1],[[7,[5]]]],[1,[[7,[6]]]],[1,6],[[1,1],4],[[1,1,1],5],[6,[[3,[2]]]],[4,[[3,[2]]]],[5,[[3,[2]]]],[6,3],[4,3],[5,3],[6],[4],[5],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,[10,10],[11,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,10],[12,11],[13,13],[10,10],[11,11],[12,12],[[]],[[]],[[]],[[]],[[],13],[[],12],[[],[[3,[2]]]],[10,[[3,[2]]]],[[],14],[10,14],[[13,15],16],[[14,15],16],[[17,15],16],[[10,15],16],[[11,15],16],[[12,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[17,17],[10,10],[11,11],[10],[11],[[],10],[[],11],[[],12],[14,[[3,[2]]]],[17,[[3,[2]]]],[[12,13],12],[[],[[3,[2]]]],[[11,18],[[3,[2]]]],[[],17],[11,17],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9]],"p":[[15,"u8"],[15,"usize"],[4,"Option"],[3,"Memchr2"],[3,"Memchr3"],[3,"Memchr"],[3,"Rev"],[4,"Result"],[3,"TypeId"],[3,"Finder"],[3,"FinderRev"],[3,"FinderBuilder"],[4,"Prefilter"],[3,"FindIter"],[3,"Formatter"],[6,"Result"],[3,"FindRevIter"],[8,"AsRef"]]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members and …","t":"OOOOOOO","n":["offset_of","offset_of_tuple","offset_of_union","raw_field","raw_field_tuple","raw_field_union","span_of"],"q":["memoffset","","","","","",""],"d":["Calculates the offset of the specified field from the …","Calculates the offset of the specified field from the …","Calculates the offset of the specified union member from …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"p":[]},\
"minigrep":{"doc":"minigrep","t":"AAFADMMLLMLLLMMMMLLMLLMMLMMMMMLLLAAIDLLLLLLLLKLLLLLLLLIDLLLLKLLLLKLLLLLKLLLLLAAADLLLLLLLLLMLLLIDDLLLLMLLLLLLLLMMMLLLLLLLMLKLLLLLLLLLLNDEMMLLLLMMMLLLLLLLLLMLLLLLLLLMLLLLFLLLLLLLL","n":["argparse","grep","main_loop","utils","MiniGrepArg","ahead_size","behind_size","borrow","borrow_mut","color_flag","deref","deref_mut","drop","expr","extract_expr","file_path","file_path_flag","fmt","from","ignorecase","init","into","line_num_flag","max_depth","new","replace_expr","replace_times","replacer","skip_hidden","thread_num","try_from","try_into","type_id","handler","matcher","Grep","GrepGroup","borrow","borrow_mut","deref","deref_mut","drop","extract_line","from","from_re_group","grep_one_line","grep_one_line","init","into","match_line","replace_line","try_from","try_into","type_id","PatternMatch","RegexMatcher","borrow","borrow_mut","clone","clone_into","contain","contain","deref","deref_mut","drop","extract","extract","from","init","into","new","replace","replace","to_owned","try_from","try_into","type_id","glober","logger","reader","PathGlober","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","sender","try_from","try_into","type_id","LinePrint","LinePrinter","PrintBuffer","borrow","borrow","borrow_mut","borrow_mut","cc","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","file_path","file_path_flag","file_path_flag","fmt","from","from","init","init","into","into","line_num_flag","new","print","print","print_all","push","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","EndOfFile","FileReader","MyErrors","ahead_size","behind_size","borrow","borrow","borrow_mut","borrow_mut","buf_reader","buffer","cc","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","file_path","fmt","fmt","from","from","init","init","into","into","line","new","next","print_buffer","provide","read_file","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["minigrep","","","","minigrep::argparse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minigrep::grep","","minigrep::grep::handler","","","","","","","","","","","","","","","","","","","minigrep::grep::matcher","","","","","","","","","","","","","","","","","","","","","","","minigrep::utils","","","minigrep::utils::glober","","","","","","","","","","","","","","minigrep::utils::logger","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minigrep::utils::reader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","main loop for grep a file","","an arg struct to store argument for usage usage","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","create a new MiniGrepArg from sys_args","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","trait for different pattern match method","match with regex","","","","","if it contain the pattern","if it contain the pattern","","","","extract the pattern","extract pos","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Replace the pattern","Replace the pattern","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","for weather print value with num and file_name","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","My own error","buffer size, the size to show before matched line","the size to show after matched line pub because it will be …","","","","","","","line number index","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","create a new FileReader instance","A next function for custom iterator want to use borrow as …","print all ahead buffer","","read file and retuen buffer reader","","","","","","","",""],"i":[0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,12,12,12,12,12,12,12,12,31,12,12,12,12,12,12,12,12,0,0,17,17,17,17,32,17,17,17,17,32,17,17,17,17,17,32,17,17,17,17,17,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,2,23,2,23,2,23,23,2,23,2,23,2,23,2,2,23,23,2,23,2,23,2,23,23,2,33,23,2,2,23,2,23,2,23,2,23,25,0,0,1,1,1,25,1,25,1,1,1,25,25,1,25,1,25,1,25,25,1,25,25,1,25,1,25,1,25,1,1,1,1,25,0,25,25,1,25,1,25,1,25],"f":[0,0,[[1,2],[[4,[2,3]]]],0,0,0,0,[[]],[[]],0,[5],[5],[5],0,0,0,0,[[6,7],8],[[]],0,[[],5],[[]],0,0,[9,[[10,[6]]]],0,0,0,0,0,[[],4],[[],4],[[],11],0,0,0,0,[[]],[[]],[5],[5],[5],[[12,13]],[[]],[[[15,[14]],[15,[14]],[15,[14]],[15,[14]],5,16,16],[[10,[12]]]],[13],[[12,13]],[[],5],[[]],[[12,13]],[[12,13],14],[[],4],[[],4],[[],11],0,0,[[]],[[]],[17,17],[[]],[13,16],[[17,13],16],[5],[5],[5],[13,15],[[17,13],15],[[]],[[],5],[[]],[[13,16],[[10,[17]]]],[[13,13,5],[[18,[13]]]],[[17,13,13,5],[[18,[13]]]],[[]],[[],4],[[],4],[[],11],0,0,0,0,[[]],[[]],[5],[5],[5],[[]],[[],5],[[]],[[13,16,5,[21,[[20,[19]]]]],[[4,[22,3]]]],0,[[],4],[[],4],[[],11],0,0,0,[[]],[[]],[[]],[[]],0,[23,23],[[]],[5],[5],[5],[5],[5],[5],0,0,0,[[23,7],8],[[]],[[]],[[],5],[[],5],[[]],[[]],0,[[16,16,14],2],[[13,5,13]],[[23,13,5,13]],[2],[[2,14,24]],[[]],[[],4],[[],4],[[],4],[[],4],[[],11],[[],11],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,[25,25],[[]],[5],[5],[5],[5],[5],[5],[[25,25],16],0,[[25,7],8],[[25,7],8],[[]],[[]],[[],5],[[],5],[[]],[[]],0,[[14,24,24],[[4,[1,3]]]],[1,[[4,[13,3]]]],[[1,2]],[26],[14,[[30,[[29,[[28,[27]]]]]]]],[[]],[[],14],[[],4],[[],4],[[],4],[[],4],[[],11],[[],11]],"p":[[3,"FileReader"],[3,"PrintBuffer"],[3,"Error"],[4,"Result"],[15,"usize"],[3,"MiniGrepArg"],[3,"Formatter"],[6,"Result"],[8,"Iterator"],[6,"Result"],[3,"TypeId"],[3,"GrepGroup"],[15,"str"],[3,"String"],[3,"Vec"],[15,"bool"],[3,"RegexMatcher"],[4,"Cow"],[3,"PathBuf"],[4,"Option"],[3,"Sender"],[3,"PathGlober"],[3,"LinePrinter"],[15,"i32"],[4,"MyErrors"],[3,"Demand"],[3,"File"],[3,"BufReader"],[3,"Lines"],[6,"Result"],[8,"Grep"],[8,"PatternMatch"],[8,"LinePrint"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","provide","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::extra","","","","","","","","","","","","","","","proc_macro2::token_stream","","","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[9,8,8,0,0,6,0,6,9,0,0,6,8,8,0,6,0,0,0,0,1,17,5,4,6,7,8,1,9,10,3,17,5,4,6,7,8,1,9,10,3,3,4,3,5,4,6,7,8,1,9,10,3,5,4,6,7,8,1,9,10,3,10,5,7,7,8,9,10,10,5,5,0,3,3,3,3,17,17,5,5,4,6,6,7,7,8,1,1,9,10,10,3,3,17,5,5,5,4,4,6,6,6,6,6,7,8,1,9,10,3,5,5,5,3,10,3,3,3,3,3,3,3,3,3,3,17,5,4,6,7,8,1,9,10,3,5,5,3,3,4,4,4,5,7,1,10,10,10,17,4,6,7,1,10,3,4,1,17,6,7,1,10,3,7,7,7,3,3,5,4,6,7,8,1,9,10,3,17,5,6,7,1,10,3,0,17,5,4,6,7,8,1,9,10,3,17,5,4,6,7,8,1,9,10,3,17,5,4,6,7,8,1,9,10,3,3,3,3,3,3,3,3,3,3,3,4,3,3,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],4],[2,3],[5,5],[4,4],[6,6],[7,7],[8,8],[1,1],[9,9],[10,10],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],11],[[],5],[7,12],[7,8],[[8,8],13],[[9,9],13],[10,13],[[10,10],13],[[5,14]],[[5,14]],0,[15,3],[15,3],[16,3],[16,3],[[17,18],19],[[17,18],19],[[5,18],19],[[5,18],19],[[4,18],19],[[6,18],19],[[6,18],19],[[7,18],19],[[7,18],19],[[8,18],19],[[1,18],19],[[1,18],19],[[9,18],19],[[10,18],19],[[10,18],19],[[3,18],19],[[3,18],19],[[]],[20,5],[[]],[6,5],[21,4],[[]],[10,6],[1,6],[[]],[7,6],[3,6],[[]],[[]],[[]],[[]],[[]],[[]],[14,5],[14,5],[22,[[23,[5,17]]]],[22,[[23,[3,17]]]],[10],[24,3],[24,3],[25,3],[25,3],[26,3],[26,3],[27,3],[27,3],[28,3],[28,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,29],[5,13],[30,3],[30,3],[[4,4],[[31,[4]]]],[[4,4],4],[[],4],[[],5],[[8,5],7],[[2,9],1],[[22,4],10],[[22,4],10],[[10,10],[[31,[11]]]],[32],[[4,4],4],[[6,4]],[[7,4]],[[1,4]],[[10,4]],[[3,4]],[4,[[31,[33]]]],[1,9],[17,4],[6,4],[7,4],[1,4],[10,4],[3,4],[7,4],[7,4],[7,5],[22,3],[[3,[35,[34]]],[[31,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[37,3],[37,3],[38,3],[38,3],[39,3],[39,3],[40,3],[40,3],[41,3],[41,3],[4,21],[34,3],[34,3],0,[[]],[[]],[12,12],[[]],[12,4],[[12,18],19],[[]],[[]],[12,4],[12,4],[[]],[[],23],[[],23],[[],36],0,0,[[]],[[]],[29,29],[[]],[[29,18],19],[[]],[[]],[[]],[29,[[31,[6]]]],[29],[[]],[[],23],[[],23],[[],36]],"p":[[3,"Punct"],[15,"char"],[3,"Literal"],[3,"Span"],[3,"TokenStream"],[4,"TokenTree"],[3,"Group"],[4,"Delimiter"],[4,"Spacing"],[3,"Ident"],[4,"Ordering"],[3,"DelimSpan"],[15,"bool"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[15,"str"],[4,"Result"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[3,"Demand"],[3,"String"],[15,"usize"],[8,"RangeBounds"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,6,6,6,6,7,0,8,8,0,0,7,7,8,8,8],"f":[0,0,0,[[]],[[]],[[]],[[]],[1,2],0,[[],3],[[],3],0,0,[[],[[5,[4]]]],[[],[[5,[4]]]],[[],3],[[],3],[3]],"p":[[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"regex":{"doc":"This crate provides a library for parsing, compiling, and …","t":"DDDDNEDDDDDDDIDDDDDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDIDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CaptureLocations","CaptureMatches","CaptureNames","Captures","CompiledTooBig","Error","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","Syntax","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","bytes","capture_locations","capture_names","captures","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","description","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","eq","escape","expand","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_match","is_match","is_match_at","iter","iter","len","len","len","len","matched","matched_any","matches","multi_line","multi_line","name","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","provide","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode","CaptureLocations","CaptureMatches","CaptureNames","Captures","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","as_bytes","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","capture_locations","capture_names","captures","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","expand","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_match","is_match","is_match_at","iter","iter","len","len","len","len","matched","matched_any","matches","multi_line","multi_line","name","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode"],"q":["regexregex::bytesd":["CaptureLocations is a low level representation of the raw …","An iterator that yields all non-overlapping capture groups …","An iterator over the names of all possible captures.","Captures represents a group of captured strings for a …","The compiled program exceeded the set size limit. The …","An error that occurred during parsing or compiling a …","Match represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches for a …","<code>NoExpand</code> indicates literal string replacement.","A compiled regular expression for matching Unicode strings.","A configurable builder for a regular expression.","Match multiple (possibly overlapping) regular expressions …","A configurable builder for a set of regular expressions.","Replacer describes types that can be used to replace …","By-reference adaptor for a <code>Replacer</code>","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex set.","A borrowed iterator over the set of matches from a regex …","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> substrings delimited by a regular …","An iterator that yields all capturing matches in the order …","A syntax error.","Returns the matched text.","Returns the original string of this regex.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the builder and compile the regular expression.","Consume the builder and compile the regular expressions …","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Match regular expressions on arbitrary bytes.","Returns an empty set of capture locations that can be …","Returns an iterator over the capture names.","Returns the capture groups corresponding to the …","Returns an iterator over all the non-overlapping capture …","Returns the number of captures.","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead of","Returns the same as captures, but starts the search at the …","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the case insensitive (<code>i</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","Set the approximate size of the cache used by the DFA.","Set the approximate size of the cache used by the DFA.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Create a new empty regex set.","Returns the ending byte offset of the match in the …","","","Escapes all regular expression meta characters in <code>text</code>.","Expands all instances of <code>$name</code> in <code>replacement</code> to the …","Returns the start and end byte range of the leftmost-first …","Returns the same as find, but starts the search at the …","Returns an iterator for each successive non-overlapping …","","","","","","","","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to parse a string into a regular expression","Returns the match associated with the capture group at …","Returns the start and end positions of the Nth capture …","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns <code>true</code> if this set contains no regular expressions.","Returns true if and only if one of the regexes in this set …","Returns true if and only if there is a match for the regex …","Returns the same as is_match, but starts the search at the …","An iterator that yields all capturing matches in the order …","Returns an iterator over indexes in the regex that matched.","Returns the total number of capture groups (even if they …","Returns the total number of regular expressions in this …","The total number of regexes in the set that created these …","Returns the total number of capture groups (even if they …","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regular expressions that match in the …","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Returns the match for the capture group named <code>name</code>. If <code>name</code>…","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new regular expression builder with the given …","Create a new regular expression builder with the given …","Create a new regex set with the given regular expressions.","Compiles a regular expression. Once compiled, it can be …","","","","","","","","","","","Return a fixed unchanging replacement string.","Return a fixed unchanging replacement string.","","","Whether to support octal syntax or not.","Whether to support octal syntax or not.","Returns the patterns that this set will match on.","","Returns the range over the starting and ending byte …","Replaces the leftmost-first match with the replacement …","Replaces all non-overlapping matches in <code>text</code> with the …","Appends text to <code>dst</code> to replace the current match.","","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …","Returns the end location of a match in the text given.","Returns the same as shortest_match, but starts the search …","","","","","","Set the approximate size limit of the compiled regular …","Set the approximate size limit of the compiled regular …","Returns an iterator of substrings of <code>text</code> delimited by a …","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …","Returns the starting byte offset of the match in the …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the greedy swap (<code>U</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the value for the Unicode (<code>u</code>) flag.","Set the value for the Unicode (<code>u</code>) flag.","CaptureLocations is a low level representation of the raw …","An iterator that yields all non-overlapping capture groups …","An iterator over the names of all possible captures.","Captures represents a group of captured byte strings for a …","Match represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches for a …","<code>NoExpand</code> indicates literal byte string replacement.","A compiled regular expression for matching arbitrary bytes.","A configurable builder for a regular expression.","Match multiple (possibly overlapping) regular expressions …","A configurable builder for a set of regular expressions.","Replacer describes types that can be used to replace …","By-reference adaptor for a <code>Replacer</code>","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex set.","A borrowed iterator over the set of matches from a regex …","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> substrings delimited by a regular …","An iterator that yields all capturing matches in the order …","Returns the matched text.","Returns the original string of this regex.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the builder and compile the regular expression.","Consume the builder and compile the regular expressions …","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Returns an empty set of capture locations that can be …","Returns an iterator over the capture names.","Returns the capture groups corresponding to the …","Returns an iterator over all the non-overlapping capture …","Returns the number of captures.","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead of","Returns the same as <code>captures_read</code>, but starts the search …","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the case insensitive (<code>i</code>) flag.","","","","","","","","","","","","","","","","","","","","Set the approximate size of the cache used by the DFA.","Set the approximate size of the cache used by the DFA.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Create a new empty regex set.","Returns the ending byte offset of the match in the …","","Expands all instances of <code>$name</code> in <code>replacement</code> to the …","Returns the start and end byte range of the leftmost-first …","Returns the same as find, but starts the search at the …","Returns an iterator for each successive non-overlapping …","","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to parse a string into a regular expression","Returns the match associated with the capture group at …","Returns the start and end positions of the Nth capture …","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns <code>true</code> if this set contains no regular expressions.","Returns true if and only if there is a match for the regex …","Returns true if and only if one of the regexes in this set …","Returns the same as is_match, but starts the search at the …","An iterator that yields all capturing matches in the order …","Returns an iterator over indexes in the regex that matched.","Returns the total number of capture groups (even if they …","Returns the total number of capture groups (even if they …","Returns the total number of regular expressions in this …","The total number of regexes in the set that created these …","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regular expressions that match in the …","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Returns the match for the capture group named <code>name</code>. If <code>name</code>…","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new regular expression builder with the given …","Create a new regular expression builder with the given …","Compiles a regular expression. Once compiled, it can be …","Create a new regex set with the given regular expressions.","","","","","","","","","","","Return a fixed unchanging replacement byte string.","Return a fixed unchanging replacement byte string.","","","Whether to support octal syntax or not.","Whether to support octal syntax or not.","Returns the patterns that this set will match on.","Returns the range over the starting and ending byte …","Replaces the leftmost-first match with the replacement …","Replaces all non-overlapping matches in <code>text</code> with the …","Appends text to <code>dst</code> to replace the current match.","","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …","Returns the end location of a match in the text given.","Returns the same as shortest_match, but starts the search …","","","","","Set the approximate size limit of the compiled regular …","Set the approximate size limit of the compiled regular …","Returns an iterator of substrings of <code>text</code> delimited by a …","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …","Returns the starting byte offset of the match in the …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the greedy swap (<code>U</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the value for the Unicode (<code>u</code>) flag.","Set the value for the Unicode (<code>u</code>) flag."],"i":[0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,3,12,5,4,7,8,17,25,18,1,3,11,26,27,10,19,14,22,9,20,12,5,4,7,8,17,25,18,1,3,11,26,27,10,19,14,22,9,20,4,7,32,32,0,3,3,3,3,3,3,3,4,7,5,8,17,18,1,3,11,10,19,20,5,8,17,18,1,3,11,10,19,20,11,19,5,4,7,4,7,8,1,5,1,0,12,3,3,3,12,5,5,4,7,8,17,25,18,1,3,3,11,26,27,10,19,14,22,9,20,12,5,4,7,8,17,25,18,1,3,11,26,27,10,19,14,22,9,20,3,12,10,4,7,12,12,12,5,4,7,8,17,25,18,1,3,11,26,27,10,19,14,22,9,20,17,17,25,18,11,26,27,19,14,22,8,8,3,3,12,17,12,8,17,10,17,17,8,4,7,12,4,7,4,7,8,3,25,18,11,26,27,19,14,22,25,18,32,32,9,20,4,7,8,5,1,3,3,32,9,20,3,3,3,25,18,11,27,19,4,7,3,3,1,4,7,5,8,17,18,1,3,11,10,19,20,5,3,12,5,4,7,8,17,25,18,1,3,11,26,27,10,19,14,22,9,20,12,5,4,7,8,17,25,18,1,3,11,26,27,10,19,14,22,9,20,12,5,4,7,8,17,25,18,1,3,11,26,27,10,19,14,22,9,20,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,37,44,38,39,36,37,51,45,52,53,43,42,46,41,47,40,48,54,49,44,38,39,36,37,51,45,52,53,43,42,46,41,47,40,48,54,49,38,39,55,55,37,37,37,37,37,37,37,38,39,36,37,43,42,46,47,40,48,49,36,37,43,42,46,47,40,48,49,43,38,39,38,39,40,36,36,44,37,37,37,44,38,39,36,37,37,51,45,52,53,43,42,46,41,47,40,48,54,49,44,38,39,36,37,51,45,52,53,43,42,46,41,47,40,48,54,49,37,44,42,38,39,44,44,44,38,39,36,37,51,45,52,53,43,42,46,41,47,40,48,54,49,51,45,52,53,43,46,48,48,54,49,40,37,40,37,44,48,44,42,40,48,48,48,40,38,39,44,38,39,38,39,37,40,51,45,52,53,43,46,54,49,54,49,55,55,41,47,38,39,40,36,37,37,55,41,47,37,37,37,53,43,54,49,38,39,37,37,36,38,39,36,37,43,42,46,47,40,48,49,37,44,38,39,36,37,51,45,52,53,43,42,46,41,47,40,48,54,49,44,38,39,36,37,51,45,52,53,43,42,46,41,47,40,48,54,49,44,38,39,36,37,51,45,52,53,43,42,46,41,47,40,48,54,49,38,39],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,[[6,[3,5]]]],[7,[[6,[8,5]]]],[[],9],[[],9],0,[3,10],[3,11],[[3,2],[[13,[12]]]],[[3,2],14],[3,15],[[3,10,2],[[13,[1]]]],[[3,10,2,15],[[13,[1]]]],[[4,16],4],[[7,16],7],[5,5],[8,8],[17,17],[18,18],[1,1],[3,3],[11,11],[10,10],[19,19],[20,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,15],[19,15],[5,2],[[4,15],4],[[7,15],7],[[4,16],4],[[7,16],7],[[],8],[1,15],[[5,5],16],[[1,1],16],[2,21],[[12,2,21]],[[3,2],[[13,[1]]]],[[3,2,15],[[13,[1]]]],[[3,2],22],[[12,23],24],[[5,23],24],[[5,23],24],[[4,23],24],[[7,23],24],[[8,23],24],[[17,23],24],[[25,23],24],[[18,23],24],[[1,23],24],[[3,23],24],[[3,23],24],[[11,23],24],[[26,23],24],[[27,23],24],[[10,23],24],[[19,23],24],[[14,23],24],[[22,23],24],[[[9,[[0,[28,29]]]],23],24],[[20,23],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[6,[3,5]]]],[[12,15],[[13,[1]]]],[[10,15],13],[[4,16],4],[[7,16],7],[[12,2],2],[[12,15],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17],[17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,16],[[8,2],16],[[3,2],16],[[3,2,15],16],[12,19],[17,18],[12,15],[8,15],[17,15],[10,15],[[17,15],16],[17,16],[[8,2],17],[[4,16],4],[[7,16],7],[[12,2],[[13,[1]]]],[[4,30],4],[[7,30],7],[2,4],[[],7],[[],[[6,[8,5]]]],[2,[[6,[3,5]]]],[25,[[13,[15]]]],[18,[[13,[15]]]],[11,[[13,[[13,[2]]]]]],[26,[[13,[2]]]],[27,[[13,[2]]]],[19,[[13,[[13,[1]]]]]],[14,[[13,[12]]]],[22,[[13,[1]]]],[25,[[13,[15]]]],[18,[[13,[15]]]],[[],[[13,[[31,[2]]]]]],[[],[[13,[[31,[2]]]]]],[[[9,[[0,[32,29]]]]],[[13,[[31,[2]]]]]],[20,[[13,[[31,[2]]]]]],[[4,16],4],[[7,16],7],[8],[33],[1,[[34,[15]]]],[[3,2,32],[[31,[2]]]],[[3,2,32],[[31,[2]]]],[[12,21]],[[[9,[[0,[32,29]]]],12,21]],[[20,12,21]],[[3,2,15,32],[[31,[2]]]],[[3,2],[[13,[15]]]],[[3,2,15],[[13,[15]]]],[25],[18],[11],[27],[19],[[4,15],4],[[7,15],7],[[3,2],26],[[3,2,15],27],[1,15],[[4,16],4],[[7,16],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[4,16],4],[[7,16],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[36],[37,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,[[6,[37,5]]]],[39,[[6,[40,5]]]],[[],41],[[],41],[37,42],[37,43],[37,[[13,[44]]]],[37,45],[37,15],[[37,42],[[13,[36]]]],[[37,42,15],[[13,[36]]]],[[38,16],38],[[39,16],39],[36,36],[37,37],[43,43],[42,42],[46,46],[47,47],[40,40],[48,48],[49,49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,15],[[38,15],38],[[39,15],39],[[38,16],38],[[39,16],39],[[],40],[36,15],[[36,36],16],[[44,50]],[37,[[13,[36]]]],[[37,15],[[13,[36]]]],[37,51],[[44,23],24],[[38,23],24],[[39,23],24],[[36,23],24],[[37,23],24],[[37,23],24],[[51,23],24],[[45,23],24],[[52,23],24],[[53,23],24],[[43,23],24],[[42,23],24],[[46,23],24],[[[41,[[0,[28,29]]]],23],24],[[47,23],24],[[40,23],24],[[48,23],24],[[54,23],24],[[49,23],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[6,[37,5]]]],[[44,15],[[13,[36]]]],[[42,15],13],[[38,16],38],[[39,16],39],[[44,2]],[[44,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48],[48],[[]],[[]],[40,16],[37,16],[40,16],[[37,15],16],[44,46],[48,49],[44,15],[42,15],[40,15],[48,15],[[48,15],16],[48,16],[40,48],[[38,16],38],[[39,16],39],[[44,2],[[13,[36]]]],[[38,30],38],[[39,30],39],[2,38],[[],39],[2,[[6,[37,5]]]],[[],[[6,[40,5]]]],[51,[[13,[36]]]],[45,[[13,[44]]]],[52,13],[53,13],[43,[[13,[[13,[2]]]]]],[46,[[13,[[13,[36]]]]]],[54,[[13,[15]]]],[49,[[13,[15]]]],[54,[[13,[15]]]],[49,[[13,[15]]]],[[],[[13,[31]]]],[[],[[13,[31]]]],[[[41,[[0,[55,29]]]]],[[13,[31]]]],[47,[[13,[31]]]],[[38,16],38],[[39,16],39],[40],[36,[[34,[15]]]],[[37,55],31],[[37,55],31],[[44,50]],[[[41,[[0,[55,29]]]],44,50]],[[47,44,50]],[[37,15,55],31],[37,[[13,[15]]]],[[37,15],[[13,[15]]]],[53],[43],[54],[49],[[38,15],38],[[39,15],39],[37,52],[[37,15],53],[36,15],[[38,16],38],[[39,16],39],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[38,16],38],[[39,16],39]],"p":[[3,"Match"],[15,"str"],[3,"Regex"],[3,"RegexBuilder"],[4,"Error"],[4,"Result"],[3,"RegexSetBuilder"],[3,"RegexSet"],[3,"ReplacerRef"],[3,"CaptureLocations"],[3,"CaptureNames"],[3,"Captures"],[4,"Option"],[3,"CaptureMatches"],[15,"usize"],[15,"bool"],[3,"SetMatches"],[3,"SetMatchesIter"],[3,"SubCaptureMatches"],[3,"NoExpand"],[3,"String"],[3,"Matches"],[3,"Formatter"],[6,"Result"],[3,"SetMatchesIntoIter"],[3,"Split"],[3,"SplitN"],[8,"Debug"],[8,"Sized"],[15,"u32"],[4,"Cow"],[8,"Replacer"],[3,"Demand"],[3,"Range"],[3,"TypeId"],[3,"Match"],[3,"Regex"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSet"],[3,"ReplacerRef"],[3,"CaptureLocations"],[3,"CaptureNames"],[3,"Captures"],[3,"CaptureMatches"],[3,"SubCaptureMatches"],[3,"NoExpand"],[3,"SetMatches"],[3,"SetMatchesIter"],[3,"Vec"],[3,"Matches"],[3,"Split"],[3,"SplitN"],[3,"SetMatchesIntoIter"],[8,"Replacer"]]},\
"regex_syntax":{"doc":"This crate provides a robust regular expression parser.","t":"ENDDGNDLALLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLALLLLLFFFLLLLLLLLLLLLLLLLLLLLLLFLLLLLANNDNNNDNEENNNNNNNNNDNNNENDEDNDENNEDEEDDNDEENNDDNNNNNNNNNNNNNQDENNNNNNENNNNNNDNDENNDNENNNNNNNNENNNNDNNENNNNNNNNNNNNQNNDNNNNNDNNNNENDEDNNNDNENNNNNNNNNNNNNNNNNIDNNNNNNNLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMMMMMMMMMMMMMMLLMMALLLALLMLLLLLMMMMMMMMMMMMMMMMMMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLMMMMMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLNENNNNNNNNNDENDDDDDDNNNNNQDENDNEDENENNNQNDNEENNNNNNNNNNNIENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNDEDLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLL","n":["Error","Parse","Parser","ParserBuilder","Result","Translate","UnicodeWordError","allow_invalid_utf8","ast","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone","clone_into","clone_into","clone_into","default","description","dot_matches_new_line","eq","escape","escape_into","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hir","ignore_whitespace","into","into","into","into","is_meta_character","is_word_byte","is_word_character","multi_line","nest_limit","new","new","octal","parse","provide","provide","swap_greed","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_is_word_character","type_id","type_id","type_id","type_id","unicode","utf8","Alnum","Alpha","Alternation","Alternation","Ascii","Ascii","Assertion","Assertion","AssertionKind","Ast","AtLeast","Bell","BinaryOp","Blank","Bounded","Bracketed","Bracketed","CaptureIndex","CaptureLimitExceeded","CaptureName","CaptureName","CarriageReturn","CaseInsensitive","Class","Class","ClassAscii","ClassAsciiKind","ClassBracketed","ClassEscapeInvalid","ClassPerl","ClassPerlKind","ClassRangeInvalid","ClassRangeLiteral","ClassSet","ClassSetBinaryOp","ClassSetBinaryOpKind","ClassSetItem","ClassSetRange","ClassSetUnion","ClassUnclosed","ClassUnicode","ClassUnicodeKind","ClassUnicodeOpKind","Cntrl","Colon","Comment","Concat","Concat","DecimalEmpty","DecimalInvalid","Difference","Digit","Digit","Dot","DotMatchesNewLine","Empty","Empty","EndLine","EndText","Equal","Err","Error","ErrorKind","EscapeHexEmpty","EscapeHexInvalid","EscapeHexInvalidDigit","EscapeUnexpectedEof","EscapeUnrecognized","Exactly","Flag","Flag","FlagDanglingNegation","FlagDuplicate","FlagRepeatedNegation","FlagUnexpectedEof","FlagUnrecognized","Flags","Flags","FlagsItem","FlagsItemKind","FormFeed","Graph","Group","Group","GroupKind","GroupNameDuplicate","GroupNameEmpty","GroupNameInvalid","GroupNameUnexpectedEof","GroupUnclosed","GroupUnopened","HexBrace","HexFixed","HexLiteralKind","IgnoreWhitespace","Intersection","Item","LineFeed","Literal","Literal","Literal","LiteralKind","Lower","MultiLine","Named","NamedValue","Negation","NestLimitExceeded","NonCapturing","NotEqual","NotWordBoundary","Octal","OneLetter","OneOrMore","Output","Perl","Perl","Position","Print","Punct","Punctuation","Range","Range","Repetition","Repetition","RepetitionCountDecimalEmpty","RepetitionCountInvalid","RepetitionCountUnclosed","RepetitionKind","RepetitionMissing","RepetitionOp","RepetitionRange","SetFlags","Space","Space","Space","Span","Special","SpecialLiteralKind","StartLine","StartText","SwapGreed","SymmetricDifference","Tab","Unicode","Unicode","Unicode","UnicodeClassInvalid","UnicodeLong","UnicodeShort","Union","UnsupportedBackreference","UnsupportedLookAround","Upper","Verbatim","VerticalTab","Visitor","WithComments","Word","Word","WordBoundary","X","Xdigit","ZeroOrMore","ZeroOrOne","add_item","ast","ast","ast","asts","asts","auxiliary_span","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte","c","capture_index","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","column","comment","comments","description","digits","drop","drop","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","finish","flag_state","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_name","greedy","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ast","into_ast","into_item","is_capturing","is_empty","is_empty","is_equal","is_negated","is_negation","is_one_line","is_valid","is_valid","items","items","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","lhs","line","name","negated","negated","negated","negated","new","new","offset","op","parse","partial_cmp","partial_cmp","pattern","print","provide","push","rhs","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","splat","start","start","start","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","visit","visit_alternation_in","visit_alternation_in","visit_class_set_binary_op_in","visit_class_set_binary_op_in","visit_class_set_binary_op_post","visit_class_set_binary_op_post","visit_class_set_binary_op_pre","visit_class_set_binary_op_pre","visit_class_set_item_post","visit_class_set_item_post","visit_class_set_item_pre","visit_class_set_item_pre","visit_post","visit_post","visit_pre","visit_pre","with_end","with_start","name","op","value","original","original","original","Parser","ParserBuilder","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","ignore_whitespace","into","into","nest_limit","new","new","octal","parse","parse_with_comments","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Alternation","Anchor","Anchor","Ascii","AsciiNegate","AtLeast","Bounded","Byte","Bytes","CaptureIndex","CaptureName","CaseFoldError","Class","Class","ClassBytes","ClassBytesIter","ClassBytesRange","ClassUnicode","ClassUnicodeIter","ClassUnicodeRange","Concat","Empty","EmptyClassNotAllowed","EndLine","EndText","Err","Error","ErrorKind","Exactly","Group","Group","GroupKind","Hir","HirKind","InvalidUtf8","Literal","Literal","NonCapturing","OneOrMore","Output","Range","Repetition","Repetition","RepetitionKind","RepetitionRange","StartLine","StartText","Unicode","Unicode","Unicode","UnicodeCaseUnavailable","UnicodeNegate","UnicodeNotAllowed","UnicodePerlClassNotFound","UnicodePropertyNotFound","UnicodePropertyValueNotFound","Visitor","WordBoundary","WordBoundary","ZeroOrMore","ZeroOrOne","alternation","anchor","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case_fold_simple","case_fold_simple","case_fold_simple","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","concat","default","default","description","difference","difference","dot","drop","empty","empty","empty","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","greedy","group","has_subexprs","hir","hir","intersect","intersect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_kind","is_all_ascii","is_all_ascii","is_all_assertions","is_alternation_literal","is_always_utf8","is_always_utf8","is_anchored_end","is_anchored_start","is_any_anchored_end","is_any_anchored_start","is_empty","is_line_anchored_end","is_line_anchored_start","is_literal","is_match_empty","is_match_empty","is_negated","is_unicode","iter","iter","kind","kind","kind","kind","literal","literal","negate","negate","negate","new","new","new","new","next","next","partial_cmp","partial_cmp","pattern","print","provide","provide","push","push","ranges","ranges","repetition","span","start","start","start","start","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","translate","try_case_fold_simple","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","visit","visit_alternation_in","visit_alternation_in","visit_post","visit_post","visit_pre","visit_pre","word_boundary","index","name","Literal","Literals","add","add_byte_class","add_char_class","all_complete","any_complete","as_ref","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","cmp","contains_empty","cross_add","cross_product","cut","cut","deref","deref_mut","empty","empty","eq","eq","fmt","fmt","from","from","into","into","is_cut","is_empty","limit_class","limit_size","literals","longest_common_prefix","longest_common_suffix","min_len","new","partial_cmp","prefixes","reverse","set_limit_class","set_limit_size","suffixes","to_empty","to_owned","to_owned","trim_suffix","try_from","try_from","try_into","try_into","type_id","type_id","unambiguous_prefixes","unambiguous_suffixes","union","union_prefixes","union_suffixes","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Translator","TranslatorBuilder","allow_invalid_utf8","borrow","borrow","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone_into","clone_into","default","dot_matches_new_line","fmt","fmt","from","from","into","into","multi_line","new","new","swap_greed","to_owned","to_owned","translate","try_from","try_from","try_into","try_into","type_id","type_id","unicode","Four","One","Three","Two","Utf8Range","Utf8Sequence","Utf8Sequences","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","end","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","len","matches","matches","new","next","partial_cmp","partial_cmp","reverse","start","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["regex_syntax","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::astregex_syntax::ast::ClassUnicodeKind","","","regex_syntax::ast::ErrorKind","","","regex_syntax::ast::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::ast::print","","","","","","","","","","","regex_syntax::hirregex_syntax::hir::GroupKind","","regex_syntax::hir::literal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::hir::print","","","","","","","","","","","regex_syntax::hir::translate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::utf8","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This error type encompasses any error that can be returned …","An error that occurred while translating concrete syntax …","A convenience parser for regular expressions.","A builder for a regular expression parser.","A type alias for dealing with errors returned by this …","An error that occurred while translating abstract syntax …","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …","When enabled, the parser will permit the construction of a …","Defines an abstract syntax for regular expressions.","","","","","","","","","Build a parser from this configuration with the given …","Enable or disable the case insensitive flag by default.","","","","","","","","","Enable or disable the “dot matches any character” flag …","","Escapes all regular expression meta characters in <code>text</code>.","Escapes all meta characters in <code>text</code> and writes the result …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Defines a high-level intermediate representation for …","Enable verbose mode in the regular expression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the given character has significance in a …","Returns true if and only if the given character is an …","Returns true if and only if the given character is a …","Enable or disable the multi-line matching flag by default.","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","Parse the regular expression into a high level intermediate","","","Enable or disable the “swap greed” flag by default.","","","","","","","","","","","","","","Returns true if and only if the given character is a …","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","Converts ranges of Unicode scalar values to equivalent …","<code>[0-9A-Za-z]</code>","<code>[A-Za-z]</code>","An alternation of regular expressions.","An alternation of regular expressions.","<code>[\\\\x00-\\\\x7F]</code>","An ASCII character class, e.g., <code>[:alnum:]</code> or <code>[:punct:]</code>.","A single zero-width assertion.","A single zero-width assertion.","An assertion kind.","An abstract syntax tree for a single regular expression.","<code>{m,}</code>","Bell, spelled <code>\\\\a</code> (<code>\\\\x07</code>).","A single binary operation (i.e., &amp;&amp;, – or ~~).","<code>[ \\\\t]</code>","<code>{m,n}</code>","A bracketed character class set, which may contain zero or …","A bracketed character class set, which may contain zero or …","<code>(a)</code>","The capturing group limit was exceeded.","A capture name.","<code>(?P&lt;name&gt;a)</code>","Carriage return, spelled <code>\\\\r</code> (<code>\\\\x0D</code>).","<code>i</code>","A single character class expression.","A single character class. This includes all forms of …","An ASCII character class.","The available ASCII character classes.","A bracketed character class, e.g., <code>[a-z0-9]</code>.","An invalid escape sequence was found in a character class …","A Perl character class.","The available Perl character classes.","An invalid character class range was found. An invalid …","An invalid range boundary was found in a character class. …","A character class set.","A Unicode character class set operation.","The type of a Unicode character class set operation.","A single component of a character class set.","A single character class range in a set.","A union of items inside a character class set.","An opening <code>[</code> was found with no corresponding closing <code>]</code>.","A Unicode character class.","The available forms of Unicode character classes.","The type of op used in a Unicode character class.","<code>[\\\\x00-\\\\x1F\\\\x7F]</code>","A property set to a specific value using a colon, e.g., …","A comment from a regular expression with an associated …","A concatenation of regular expressions.","A concatenation of regular expressions.","Note that this error variant is no longer used. Namely, a …","An invalid decimal number was given where one was expected.","The difference of two sets, e.g., <code>\\\\pN--[0-9]</code>.","Decimal numbers.","<code>[0-9]</code>","The “any character” class.","<code>s</code>","An empty regex that matches everything.","An empty item.","<code>$</code>","<code>\\\\z</code>","A property set to a specific value, e.g., <code>\\\\p{scx=Katakana}</code>.","An error that visiting an AST might return.","An error that occurred while parsing a regular expression …","The type of an error that occurred while building an AST.","A bracketed hex literal was empty.","A bracketed hex literal did not correspond to a Unicode …","An invalid hexadecimal digit was found.","EOF was found before an escape sequence was completed.","An unrecognized escape sequence.","<code>{m}</code>","A single flag.","A single flag in a group.","A dangling negation was used when setting flags, e.g., <code>i-</code>.","A flag was used twice, e.g., <code>i-i</code>.","The negation operator was used twice, e.g., <code>-i-s</code>.","Expected a flag but got EOF, e.g., <code>(?</code>.","Unrecognized flag, e.g., <code>a</code>.","A group of flags.","A set of flags, e.g., <code>(?is)</code>.","A single item in a group of flags.","The kind of an item in a group of flags.","Form feed, spelled <code>\\\\f</code> (<code>\\\\x0C</code>).","<code>[!-~]</code>","A grouped regular expression.","A grouped regular expression.","The kind of a group.","A duplicate capture name was found.","A capture group name is empty, e.g., <code>(?P&lt;&gt;abc)</code>.","An invalid character was seen for a capture group name. …","A closing <code>&gt;</code> could not be found for a capture group name.","An unclosed group, e.g., <code>(ab</code>.","An unopened group, e.g., <code>ab)</code>.","The literal is written as a hex code with a bracketed …","The literal is written as a hex code with a fixed number …","The type of a Unicode hex literal.","<code>x</code>","The intersection of two sets, e.g., <code>\\\\pN&amp;&amp;[a-z]</code>.","An item, which can be a single literal, range, nested …","Line feed, spelled <code>\\\\n</code> (<code>\\\\x0A</code>).","A single literal expression.","A single character literal, which includes escape …","A single literal.","The kind of a single literal expression.","<code>[a-z]</code>","<code>m</code>","A binary property, general category or script. The string …","A property name and an associated value.","A negation operator applied to all subsequent flags in the …","The nest limit was exceeded. The limit stored here is the …","<code>(?:a)</code> and <code>(?i:a)</code>","A property that isn’t a particular value, e.g., …","<code>\\\\B</code>","The literal is written as an octal escape, e.g., <code>\\\\141</code>.","A one letter abbreviated class, e.g., <code>\\\\pN</code>.","<code>+</code>","The result of visiting an AST.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A single position in a regular expression.","<code>[ -~]</code>","<code>[!-/:-@\\\\[-</code>{-~]`","The literal is written as an escape because it is …","A range between two literals.","<code>{m,n}</code>","A repetition operation applied to a regular expression.","A repetition operator applied to an arbitrary regular …","An opening <code>{</code> was not followed by a valid decimal value. …","The range provided in a counted repetition operator is …","An opening <code>{</code> was found with no corresponding closing <code>}</code>.","The kind of a repetition operator.","A repetition operator was applied to a missing …","The repetition operator itself.","A range repetition operator.","A group of flags that is not applied to a particular …","Space, spelled <code>\\\\ </code> (<code>\\\\x20</code>). Note that this can only appear …","Whitespace.","<code>[\\\\t\\\\n\\\\v\\\\f\\\\r ]</code>","Span represents the position information of a single AST …","The literal is written as a specially recognized escape, …","The type of a special literal.","<code>^</code>","<code>\\\\A</code>","<code>U</code>","The symmetric difference of two sets. The symmetric …","Tab, spelled <code>\\\\t</code> (<code>\\\\x09</code>).","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","<code>u</code>","The Unicode class is not valid. This typically occurs when …","A <code>\\\\U</code> prefix. When used without brackets, this form is …","A <code>\\\\u</code> prefix. When used without brackets, this form is …","A union of items.","When octal support is disabled, this error is produced …","When syntax similar to PCRE’s look-around is used, this …","<code>[A-Z]</code>","The literal is written verbatim, e.g., <code>a</code> or <code>☃</code>.","Vertical tab, spelled <code>\\\\v</code> (<code>\\\\x0B</code>).","A trait for visiting an abstract syntax tree (AST) in …","An abstract syntax tree for a singular expression along …","Word characters.","<code>[0-9A-Za-z_]</code>","<code>\\\\b</code>","A <code>\\\\x</code> prefix. When used without brackets, this form is …","<code>[0-9A-Fa-f]</code>","<code>*</code>","<code>?</code>","Add the given item to this sequence of flags.","The actual ast.","The regular expression under repetition.","The regular expression in this group.","The alternate regular expressions.","The concatenation regular expressions.","Return an auxiliary span. This span exists only for some …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If this literal was written as a <code>\\\\x</code> hex escape, then this …","The Unicode scalar value corresponding to this literal.","Returns the capture index of this group, if this is a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The approximate column number, starting at <code>1</code>.","The comment text, starting with the first character …","All comments found in the original regular expression.","","The number of digits that must be used with this literal …","","","The end byte offset.","The end of this range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","Returns the state of the given flag in this set.","If this group is non-capturing, then this returns the …","The actual sequence of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the corresponding ClassAsciiKind variant for the …","Whether this operation was applied greedily or not.","The capture index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return this alternation as an AST.","Return this concatenation as an AST.","Return this union as a character class set item.","Returns true if and only if this group is capturing.","Returns true if and only if this span is empty. That is, …","Return true if and only if this Ast is empty.","Whether the op is an equality op or not.","Returns true if this class has been negated.","Returns true if and only if this item is a negation …","Returns true if and only if this span occurs on a single …","Returns true if and only if this character class range is …","Returns true if and only if this repetition range is valid.","The sequence of items that make up this union.","A sequence of flag items. Each item is either a flag or a …","Return the type of this error.","The kind of this literal.","The kind of Perl class.","The kind of ASCII class.","The kind of Unicode class.","The type of this set. A set is either a normal union of …","The type of this set operation.","The assertion kind, e.g., <code>\\\\b</code> or <code>^</code>.","The type of operation.","The kind of this group.","The kind of this item.","The left hand side of the operation.","The line number, starting at <code>1</code>.","The capture name.","Whether the class is negated or not. e.g., <code>\\\\d</code> is not …","Whether the class is negated or not. e.g., <code>[[:alpha:]]</code> is …","Whether this class is negated or not.","Whether this class is negated or not. e.g., <code>[a]</code> is not …","Create a new span with the given positions.","Create a new position with the given information.","The absolute offset of this position, starting at <code>0</code> from …","The actual operation.","This module provides a regular expression parser.","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Ast</code>.","","Push a new item in this union.","The right hand side of the operation.","Return the span at which this error occurred.","Return the span of this abstract syntax tree.","Return the span of this character class.","Return the span of this character class set.","Return the span of this character class set item.","The span of this comment, including the beginning <code>#</code> and …","The span of this alternation.","The span of this concatenation.","The span of this literal.","The span of this class.","The span of this class.","The span of this class.","The span of this class.","The span of this range.","The span of the items in this operation. e.g., the <code>a-z0-9</code> …","The span of this operation. e.g., the <code>a-z--[h-p]</code> in …","The span of this assertion.","The span of this operation.","The span of this operator. This includes things like <code>+</code>, <code>*?</code> …","The span of this group.","The span of this capture name.","The span of these flags, including the grouping …","The span of this group of flags.","The span of this item.","Create a new span using the given position as the start …","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","The start byte offset.","The start of this rangeuild a set from a union.","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an <code>Alternation</code>…","This method is called between child nodes of an <code>Alternation</code>…","This method is called between the left hand and right hand …","This method is called between the left hand and right hand …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> before …","This method is called on every <code>ClassSetItem</code> before …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> before descending into …","This method is called on an <code>Ast</code> before descending into …","Create a new span by replacing the ending the position …","Create a new span by replacing the starting the position …","The property name (which may be empty).","The type of Unicode op used to associate <code>name</code> with <code>value</code>.","The property value (which may be empty).","The position of the original flag. The error position …","The position of the original negation operator. The error …","The position of the initial occurrence of the capture …","A regular expression parser.","A builder for a regular expression parser.","","","","","Build a parser from this configuration with the given …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Enable verbose mode in the regular expression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","Parse the regular expression into an abstract syntax tree.","Parse the regular expression and return an abstract syntax …","","","","","","","","","A printer for a regular expression abstract syntax tree.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","An alternation of expressions. An alternation always has …","The high-level intermediate representation for an anchor …","An anchor assertion. An anchor assertion match always has …","Match an ASCII-only word boundary. That is, this matches a …","Match an ASCII-only negation of a word boundary.","Matches a sub-expression at least this many times.","Matches a sub-expression at least <code>m</code> times and at most <code>n</code> …","A single character represented by an arbitrary byte.","A set of characters represented by arbitrary bytes (one …","A normal unnamed capturing group.","A named capturing group.","An error that occurs when Unicode-aware simple case …","The high-level intermediate representation of a character …","A single character class that matches any of the …","A set of characters represented by arbitrary bytes (where …","An iterator over all ranges in a byte character class.","A single range of characters represented by arbitrary …","A set of characters represented by Unicode scalar values.","An iterator over all ranges in a Unicode character class.","A single range of characters represented by Unicode scalar …","A concatenation of expressions. A concatenation always has …","The empty regular expression, which matches everything, …","This occurs when the translator attempts to construct a …","Match the end of a line or the end of text. Specifically, …","Match the end of text. Specifically, this matches at the …","An error that visiting an HIR might return.","An error that can occur while translating an <code>Ast</code> to a <code>Hir</code>.","The type of an error that occurred while building an <code>Hir</code>.","Matches a sub-expression exactly this many times.","The high-level intermediate representation for a group.","A possibly capturing group, which contains a child …","The kind of group.","A high-level intermediate representation (HIR) for a …","The kind of an arbitrary <code>Hir</code> expression.","This error occurs when translating a pattern that could …","The high-level intermediate representation of a literal.","A single literal character that matches exactly this …","A non-capturing group.","Matches a sub-expression one or more times.","The result of visiting an HIR.","Matches a sub-expression within a bounded range of times.","The high-level intermediate representation of a repetition …","A repetition operation applied to a child expression.","The kind of a repetition operator.","The kind of a counted repetition operator.","Match the beginning of a line or the beginning of text. …","Match the beginning of text. Specifically, this matches at …","A single character represented by a Unicode scalar value.","A set of characters represented by Unicode scalar values.","Match a Unicode-aware word boundary. That is, this matches …","This occurs when the Unicode simple case mapping tables …","Match a Unicode-aware negation of a word boundary.","This error occurs when a Unicode feature is used when …","This occurs when a Unicode-aware Perl character class (<code>\\\\w</code>, …","This occurs when an unrecognized Unicode property name …","This occurs when an unrecognized Unicode property value …","A trait for visiting the high-level IR (HIR) in depth …","The high-level intermediate representation for a …","A word boundary assertion, which may or may not be Unicode …","Matches a sub-expression zero or more times.","Matches a sub-expression zero or one times.","Returns the alternation of the given expressions.","Creates an anchor assertion HIR expression.","Build an HIR expression for <code>(?s).</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply Unicode simple case folding to this character class, …","Expand this character class such that it contains all case …","Expand this character class such that it contains all case …","Creates a class HIR expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the concatenation of the given expressions.","","","","Subtract the given character class from this character …","Subtract the given byte class from this byte class, in …","Build an HIR expression for <code>.</code>.","","Returns an empty HIR expression.","Create a new class with no ranges.","Create a new class with no ranges.","Return the end of this range.","Return the end of this range.","","","","","","","","","","","","","","","","","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Whether this repetition operator is greedy or not. A …","Creates a group HIR expression.","Returns true if and only if this kind has any (including …","The expression inside the capturing group, which may be …","The expression being repeated.","Intersect this character class with the given character …","Intersect this byte class with the given byte class, in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consumes ownership of this HIR expression and returns its …","Returns true if and only if this character class will …","Returns true if and only if this character class will …","Returns true if and only if this entire HIR expression is …","Return true if and only if this HIR is either a simple …","Return true if and only if this HIR will always match …","Returns true if and only if this character class will only …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR contains any …","Return true if and only if this HIR contains any …","Return true if and only if this HIR is the empty regular …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is a simple literal. …","Return true if and only if the empty string is part of the …","Returns true if and only if this repetition operator makes …","Returns true if and only if this word boundary assertion …","Returns true if and only if this literal corresponds to a …","Return an iterator over all ranges in this class.","Return an iterator over all ranges in this class.","Return the type of this error.","Returns a reference to the underlying HIR kind.","The kind of this group. If it is a capturing group, then …","The kind of this repetition operator.","Provides routines for extracting literal prefixes and …","Creates a literal HIR expression.","Negate this character class in place.","Negate this character class.","Negate this byte class.","Create a new class from a sequence of ranges.","Create a new Unicode scalar value range for a character …","Create a new class from a sequence of ranges.","Create a new byte range for a character class.","","","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Hir</code>.","","","Add a new range to this set.","Add a new range to this set.","Return the underlying ranges as a slice.","Return the underlying ranges as a slice.","Creates a repetition HIR expression.","Return the span at which this error occurred.","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","Return the start of this range.","Return the start of this range.","Compute the symmetric difference of the given character …","Compute the symmetric difference of the given byte …","","","","","","","","","","","","","","","","","","","","","","Defines a translator that converts an <code>Ast</code> to an <code>Hir</code>.","Expand this character class such that it contains all case …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Union this character class with the given character class, …","Union this byte class with the given byte class, in place.","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an …","This method is called between child nodes of an …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> before descending into …","This method is called on an <code>Hir</code> before descending into …","Creates a word boundary assertion HIR expression.","The capture index of the group.","The name of the group.","A single member of a set of literals extracted from a …","A set of literal byte strings extracted from a regular …","Adds the given literal to this set.","Extends each literal in this set with the byte class given.","Extends each literal in this set with the character class …","Returns true if all members in this set are complete.","Returns true if any member in this set is complete.","","","","","","Clears this set of all members.","","","","","","Returns true if this set contains an empty literal.","Extends each literal in this set with the bytes given.","Extends this set with another set.","Cuts every member of this set. When a member is cut, it …","Cuts this literal.","","","Returns a new empty set of literals using default limits.","Returns a new complete empty literal.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this literal was “cut.”","Returns true if this set is empty or if all of its members …","Get the character class size limit for this set.","Get the approximate size limit (in bytes) of this set.","Returns the set of literals as a slice. Its order is …","Returns the longest common prefix of all members in this …","Returns the longest common suffix of all members in this …","Returns the length of the smallest literal.","Returns a new complete literal with the bytes given.","","Returns a set of literal prefixes extracted from the given …","Reverses all members in place.","Limits the size of character(or byte) classes considered.","Set the approximate size limit (in bytes) of this set.","Returns a set of literal suffixes extracted from the given …","Returns a new empty set of literals using this set’s …","","","Returns a new set of literals with the given number of …","","","","","","","Returns a new set of prefixes of this set of literals that …","Returns a new set of suffixes of this set of literals that …","Unions this set with another set.","Unions the prefixes from the given expression to this set.","Unions the suffixes from the given expression to this set.","A printer for a regular expression’s high-level …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","A translator maps abstract syntax to a high level …","A builder for constructing an AST-&gt;HIR translator.","When enabled, translation will permit the construction of …","","","","","Build a translator using the current configuration.","Enable or disable the case insensitive flag (<code>i</code>) by default.","","","","","","Enable or disable the “dot matches any character” flag …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Enable or disable the multi-line matching flag (<code>m</code>) by …","Create a new translator builder with a default c …","Create a new translator using the default configuration.","Enable or disable the “swap greed” flag (<code>U</code>) by default.","","","Translate the given abstract syntax tree (AST) into a high …","","","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","Four successive byte ranges.","One byte range.","Three successive byte ranges.","Two successive byte ranges.","A single inclusive range of UTF-8 bytes.","Utf8Sequence represents a sequence of byte ranges.","An iterator over ranges of matching UTF-8 byte sequences.","Returns the underlying sequence of byte ranges as a slice.","","","","","","","","","","","","","End of byte range (inclusive).","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the number of byte ranges in this sequence.","Returns true if and only if a prefix of <code>bytes</code> matches this …","Returns true if and only if the given byte is in this …","Create a new iterator over UTF-8 byte ranges for the …","","","","Reverses the ranges in this sequence.","Start of byte range (inclusive).","","","","","","","","","","",""],"i":[0,4,0,0,0,4,0,1,0,4,1,3,9,4,1,3,9,1,1,4,1,3,4,1,3,1,4,1,4,0,0,4,4,1,3,9,9,4,4,4,1,3,9,0,1,4,1,3,9,0,0,0,1,1,1,3,1,3,4,9,1,4,1,3,4,9,4,1,3,9,4,1,3,9,0,4,1,3,9,1,0,41,41,0,31,41,47,0,31,0,0,57,35,46,41,57,37,47,58,27,0,58,35,62,0,31,0,0,0,27,0,0,27,27,0,0,0,0,0,0,27,0,0,0,41,44,0,0,31,27,27,51,39,41,31,62,31,47,53,53,44,64,0,0,27,27,27,27,27,57,0,61,27,27,27,27,27,0,31,0,0,35,41,0,31,0,27,27,27,27,27,27,34,34,0,62,51,46,35,0,31,47,0,41,62,43,43,61,27,58,44,53,34,43,56,64,37,47,0,41,41,34,47,56,0,31,27,27,27,0,27,0,0,0,35,39,41,0,34,0,53,53,62,51,35,37,47,62,27,36,36,47,27,27,41,34,35,0,0,39,41,53,36,41,56,56,20,29,54,26,32,33,11,11,27,24,28,29,30,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,11,27,24,28,29,30,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,25,25,26,11,27,24,28,29,30,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,11,27,24,28,29,30,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,24,28,28,30,29,11,36,31,46,24,48,11,27,24,28,29,30,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,64,20,26,60,11,11,27,27,24,28,29,30,31,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,11,27,24,28,29,30,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,41,54,59,11,27,24,28,29,30,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,32,33,49,26,24,31,44,42,61,24,48,57,49,20,11,25,38,40,42,45,50,52,55,26,21,50,28,59,38,40,42,45,24,28,28,54,0,24,28,11,0,11,49,50,11,31,37,46,47,30,32,33,25,38,40,42,45,48,49,50,52,54,55,26,59,60,20,21,24,64,64,24,48,11,27,24,28,29,30,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,11,27,31,11,27,24,28,29,30,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,11,27,24,28,29,30,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,11,27,24,28,29,30,31,32,33,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,58,59,60,20,21,61,62,46,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,24,24,97,97,97,98,99,100,0,0,65,66,65,66,65,65,66,65,66,65,65,66,65,66,65,65,66,65,65,66,65,66,66,65,66,65,66,65,66,65,66,0,67,67,67,67,67,67,67,67,67,67,75,0,75,79,79,84,84,76,71,81,81,0,0,75,0,0,0,0,0,0,75,75,74,70,70,88,0,0,84,0,75,0,0,0,74,0,75,81,83,88,83,0,75,0,0,70,70,76,71,79,74,79,74,74,74,74,0,0,75,83,83,15,15,15,10,74,15,75,76,71,72,85,77,73,86,78,70,79,80,81,82,83,84,87,10,74,15,75,76,71,72,85,77,73,86,78,70,79,80,81,82,83,84,87,71,72,73,15,10,74,15,75,76,71,72,77,73,78,70,79,80,81,82,83,84,10,74,15,75,76,71,72,77,73,78,70,79,80,81,82,83,84,77,78,15,77,78,10,72,73,15,15,15,72,73,77,78,10,74,15,75,76,71,72,77,73,78,70,79,80,81,82,83,84,88,10,10,74,74,15,15,75,76,71,72,85,77,73,86,78,70,79,80,81,82,83,84,87,87,10,74,15,75,76,71,72,85,77,73,86,78,70,79,80,81,82,83,84,87,82,15,75,80,82,72,73,10,74,15,75,76,71,72,85,77,73,86,78,70,79,80,81,82,83,84,87,85,86,15,72,73,15,15,15,71,15,15,15,15,75,15,15,15,15,82,79,76,72,73,10,15,80,82,0,15,71,72,73,72,77,73,78,85,86,77,78,10,0,10,87,72,73,72,73,15,10,88,88,77,78,72,73,10,74,15,75,76,71,72,77,73,78,70,79,80,81,82,83,84,10,74,15,87,0,72,10,74,15,75,76,71,72,85,77,73,86,78,70,79,80,81,82,83,84,87,10,74,15,75,76,71,72,85,77,73,86,78,70,79,80,81,82,83,84,87,10,74,15,75,76,71,72,85,77,73,86,78,70,79,80,81,82,83,84,87,72,73,0,88,88,88,88,88,88,15,101,101,0,0,89,89,89,89,89,90,89,90,89,90,89,89,90,89,90,90,89,89,89,89,90,90,90,89,90,89,90,89,90,89,90,89,90,90,89,89,89,89,89,89,89,90,90,89,89,89,89,89,89,89,90,89,89,90,89,90,89,90,89,89,89,89,89,0,91,91,91,91,91,91,91,91,91,91,0,0,92,92,93,92,93,92,92,92,93,92,93,92,92,92,93,92,93,92,93,92,92,93,92,92,93,93,92,93,92,93,92,93,92,94,94,94,94,0,0,0,94,94,95,96,94,95,96,94,95,94,95,94,95,95,94,95,94,95,96,94,95,96,94,95,96,94,96,94,94,95,96,96,94,95,94,95,94,95,94,95,96,94,95,96,94,95,96],"f":[0,0,0,0,0,0,0,[[1,2],1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,3],[[1,2],1],[4,4],[1,1],[3,3],[[]],[[]],[[]],[[],1],[4,5],[[1,2],1],[[4,4],2],[5,6],[[5,6]],[[4,7],8],[[4,7],8],[[1,7],8],[[3,7],8],[[9,7],8],[[9,7],8],[10,4],[11,4],[[]],[[]],[[]],[[]],0,[[1,2],1],[[]],[[]],[[]],[[]],[12,2],[13,2],[12,2],[[1,2],1],[[1,14],1],[[],1],[[],3],[[1,2],1],[[3,5],[[16,[15]]]],[17],[17],[[1,2],1],[[]],[[]],[[]],[[],6],[[],6],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[12,[[18,[2,9]]]],[[],19],[[],19],[[],19],[[],19],[[1,2],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[20,21],[[23,[22]]]],0,0,0,0,0,[11,[[23,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,[[23,[13]]]],0,[26,[[23,[14]]]],[11,11],[27,27],[24,24],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[25,25],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[26,26],[58,58],[59,59],[60,60],[20,20],[21,21],[61,61],[62,62],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[24,24],63],[[28,28],63],0,0,0,[11,5],[36,14],[31],[46],0,0,[[11,11],2],[[27,27],2],[[24,24],2],[[28,28],2],[[29,29],2],[[30,30],2],[[31,31],2],[[32,32],2],[[33,33],2],[[25,25],2],[[34,34],2],[[35,35],2],[[36,36],2],[[37,37],2],[[38,38],2],[[39,39],2],[[40,40],2],[[41,41],2],[[42,42],2],[[43,43],2],[[44,44],2],[[45,45],2],[[46,46],2],[[47,47],2],[[48,48],2],[[49,49],2],[[50,50],2],[[51,51],2],[[52,52],2],[[53,53],2],[[54,54],2],[[55,55],2],[[56,56],2],[[57,57],2],[[26,26],2],[[58,58],2],[[59,59],2],[[60,60],2],[[20,20],2],[[21,21],2],[[61,61],2],[[62,62],2],[[],18],[[20,62],[[23,[2]]]],[26,[[23,[20]]]],0,[[11,7],8],[[11,7],8],[[27,7],8],[[27,7],8],[[24,7],8],[[28,7],8],[[29,7],8],[[30,7],8],[[31,7],8],[[31,7],8],[[32,7],8],[[33,7],8],[[25,7],8],[[34,7],8],[[35,7],8],[[36,7],8],[[37,7],8],[[38,7],8],[[39,7],8],[[40,7],8],[[41,7],8],[[42,7],8],[[43,7],8],[[44,7],8],[[45,7],8],[[46,7],8],[[47,7],8],[[48,7],8],[[49,7],8],[[50,7],8],[[51,7],8],[[52,7],8],[[53,7],8],[[54,7],8],[[55,7],8],[[56,7],8],[[57,7],8],[[26,7],8],[[58,7],8],[[59,7],8],[[60,7],8],[[20,7],8],[[21,7],8],[[61,7],8],[[62,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[23,[41]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,31],[33,31],[49,47],[26,2],[24,2],[31,2],[44,2],[42,2],[61,2],[24,2],[48,2],[57,2],0,0,[11,27],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[28,28],24],[[22,22,22],28],0,0,0,[[24,24],[[23,[63]]]],[[28,28],[[23,[63]]]],[11,5],0,[17],[[49,47]],0,[11,24],[31,24],[37,24],[46,24],[47,24],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[28,24],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[49,46],[[31,64],18],[[],18],[[],18],[50,18],[50,18],[50,18],[50,18],[50,18],[50,18],[47,18],[47,18],[47,18],[47,18],[31,18],[31,18],[31,18],[31,18],[[24,28],24],[[24,28],24],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[65,66],[65,65],[66,66],[[]],[[]],[[],65],[[65,7],8],[[66,7],8],[[]],[[]],[[65,2],65],[[]],[[]],[[65,14],65],[[],65],[[],66],[[65,2],65],[[66,5],[[18,[31,11]]]],[[66,5],[[18,[29,11]]]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],0,[[]],[[]],[[67,7],8],[[]],[[]],[[],67],[[67,31,68],8],[[],18],[[],18],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[69,[15]]],15],[70,15],[2,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71],[72],[73],[71,15],[10,10],[74,74],[15,15],[75,75],[76,76],[71,71],[72,72],[77,77],[73,73],[78,78],[70,70],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[77,77],63],[[78,78],63],[[[69,[15]]],15],[[],77],[[],78],[10,5],[[72,72]],[[73,73]],[2,15],[15],[[],15],[[],72],[[],73],[77,12],[78,13],[[10,10],2],[[74,74],2],[[15,15],2],[[75,75],2],[[76,76],2],[[71,71],2],[[72,72],2],[[77,77],2],[[73,73],2],[[78,78],2],[[70,70],2],[[79,79],2],[[80,80],2],[[81,81],2],[[82,82],2],[[83,83],2],[[84,84],2],[[],18],[[10,7],8],[[10,7],8],[[74,7],8],[[74,7],8],[[15,7],8],[[15,7],8],[[75,7],8],[[76,7],8],[[71,7],8],[[72,7],8],[[85,7],8],[[77,7],8],[[73,7],8],[[86,7],8],[[78,7],8],[[70,7],8],[[79,7],8],[[80,7],8],[[81,7],8],[[82,7],8],[[83,7],8],[[84,7],8],[[87,7],8],[[87,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[80,15],[75,2],0,0,[[72,72]],[[73,73]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,75],[72,2],[73,2],[15,2],[15,2],[15,2],[71,2],[15,2],[15,2],[15,2],[15,2],[75,2],[15,2],[15,2],[15,2],[15,2],[82,2],[79,2],[76,2],[72,85],[73,86],[10,74],[15,75],0,0,0,[76,15],[71],[72],[73],[[],72],[[12,12],77],[[],73],[[13,13],78],[85,[[23,[77]]]],[86,[[23,[78]]]],[[77,77],[[23,[63]]]],[[78,78],[[23,[63]]]],[10,5],0,[17],[17],[[72,77]],[[73,78]],[72],[73],[82,15],[10,24],[[]],[[]],[77,12],[78,13],[[72,72]],[[73,73]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],0,[72,[[18,[87]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[72,72]],[[73,73]],[[15,88],18],[[],18],[[],18],[15,18],[15,18],[15,18],[15,18],[79,15],0,0,0,0,[[89,90],2],[[89,73],2],[[89,72],2],[89,2],[89,2],[90],[[]],[[]],[[]],[[]],[89],[89,89],[90,90],[[]],[[]],[[90,90],63],[89,2],[89,2],[[89,89],2],[89],[90],[90,69],[90,69],[[],89],[[],90],[[89,89],2],[[90,90],2],[[89,7],8],[[90,7],8],[[]],[[]],[[]],[[]],[90,2],[89,2],[89,22],[89,22],[89],[89],[89],[89,[[23,[22]]]],[[[69,[13]]],90],[[90,90],[[23,[63]]]],[15,89],[89],[[89,22],89],[[89,22],89],[15,89],[89,89],[[]],[[]],[[89,22],[[23,[89]]]],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[89,89],[89,89],[[89,89],2],[[89,15],2],[[89,15],2],0,[[]],[[]],[[91,7],8],[[]],[[]],[[],91],[[91,15,68],8],[[],18],[[],18],[[],19],0,0,[[92,2],92],[[]],[[]],[[]],[[]],[92,93],[[92,2],92],[92,92],[93,93],[[]],[[]],[[],92],[[92,2],92],[[92,7],8],[[93,7],8],[[]],[[]],[[]],[[]],[[92,2],92],[[],92],[[],93],[[92,2],92],[[]],[[]],[[93,5,31],[[18,[15,10]]]],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[92,2],92],0,0,0,0,0,0,0,[94],[[]],[[]],[[]],[[]],[[]],[[]],[94,94],[95,95],[[]],[[]],[[94,94],63],[[95,95],63],0,[[94,94],2],[[95,95],2],[[94,7],8],[[95,7],8],[[96,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[94],[[]],[94,22],[94,2],[[95,13],2],[[12,12],96],[96,23],[[94,94],[[23,[63]]]],[[95,95],[[23,[63]]]],[94],0,[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19]],"p":[[3,"ParserBuilder"],[15,"bool"],[3,"Parser"],[4,"Error"],[15,"str"],[3,"String"],[3,"Formatter"],[6,"Result"],[3,"UnicodeWordError"],[3,"Error"],[3,"Error"],[15,"char"],[15,"u8"],[15,"u32"],[3,"Hir"],[6,"Result"],[3,"Demand"],[4,"Result"],[3,"TypeId"],[3,"Flags"],[3,"FlagsItem"],[15,"usize"],[4,"Option"],[3,"Span"],[3,"Literal"],[3,"Group"],[4,"ErrorKind"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[4,"Ast"],[3,"Alternation"],[3,"Concat"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[3,"ClassPerl"],[4,"ClassPerlKind"],[3,"ClassAscii"],[4,"ClassAsciiKind"],[3,"ClassUnicode"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[3,"ClassBracketed"],[4,"ClassSet"],[4,"ClassSetItem"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[4,"ClassSetBinaryOpKind"],[3,"Assertion"],[4,"AssertionKind"],[3,"Repetition"],[3,"RepetitionOp"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[3,"CaptureName"],[3,"SetFlags"],[4,"FlagsItemKind"],[4,"Flag"],[4,"Ordering"],[8,"Visitor"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Write"],[3,"Vec"],[4,"Anchor"],[4,"Class"],[3,"ClassUnicode"],[3,"ClassBytes"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[3,"ClassUnicodeRange"],[3,"ClassBytesRange"],[4,"WordBoundary"],[3,"Group"],[4,"GroupKind"],[3,"Repetition"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"ClassUnicodeIter"],[3,"ClassBytesIter"],[3,"CaseFoldError"],[8,"Visitor"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[4,"Utf8Sequence"],[3,"Utf8Range"],[3,"Utf8Sequences"],[13,"NamedValue"],[13,"FlagDuplicate"],[13,"FlagRepeatedNegation"],[13,"GroupNameDuplicate"],[13,"CaptureName"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out of …","t":"EDILLLLOLLLLLLLFLLLKLLLLLLLL","n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":["scopeguard","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected value.","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred closure …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through deref) …"],"i":[0,0,0,1,4,1,4,0,1,1,1,1,4,1,4,0,1,4,1,8,4,1,4,1,4,1,4,1],"f":[0,0,0,[[]],[[]],[[]],[[]],0,[1],[1],[1],[[1,2],3],[[4,2],3],[[]],[[]],[[],[[1,[4]]]],[[]],[[]],[1],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],1]],"p":[[3,"ScopeGuard"],[3,"Formatter"],[6,"Result"],[4,"Always"],[15,"bool"],[4,"Result"],[3,"TypeId"],[8,"Strategy"]]},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDNNNDNDNNEDNNDDENNNNNNNNNDNNNNNNNNNNNNDDNNNEDDDNNDNNNNDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNEEDDNNNEEDNNNDNDNDNNNNNNNNDNNNNDNENDDDDDDDNNDNNENNEEDDNNNNNNNNNNNNNNNNNNNDDNNNEDDDNNDNNNNNNNNGNENNNNNNENNNNONDENNNNNDENNNNDDDDDDDDDEDDDDDDDENNNNNNDNNNNDEDENNMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMOMMMMOALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLMMOOMLLLMMMMMMMMMMMMMMMMLLLLLMMMMMMMMMMAMMMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLMMMMMMLLLLMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMLMMMMLMMMMMMMLMAMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMMMMMMOAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLOLLLLLOOFLLLLLLMMMMMMMMMMMAMMLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMLLLLLMMMMMMMMMLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKSKDLLLLMLLFMLLLLDDDQIDGIIGDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIKKNDDDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closure","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Eq","Error","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","Field","FieldMutability","Fields","FieldsNamed","FieldsUnnamed","Float","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","Ident","If","ImplGenerics","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulAssign","NameValue","Named","Named","Ne","Neg","Never","None","None","None","Not","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Raw","Reference","Reference","Rem","RemAssign","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Slice","Str","StrStyle","Struct","Struct","Sub","SubAssign","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Variant","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Yield","abi","and_token","apostrophe","args","args","arguments","as_token","as_token","as_turbofish","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","base10_digits","base10_digits","base10_parse","base10_parse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","const_params","const_params_mut","const_token","const_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","delimiter","delimiter","discriminant","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","iter","iter_mut","leading_colon","left","len","len","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lit","lt_token","lt_token","lt_token","lt_token","mac","mac","make_where_clause","member","meta","meta","modifier","mutability","mutability","mutability","name","name","name","named","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args","parse_args_with","parse_args_with","parse_body","parse_body_with","parse_inner","parse_macro_input","parse_mod_style","parse_named","parse_nested_meta","parse_nested_meta","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","punctuated","qself","qself","require_list","require_name_value","require_path_only","right","segments","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","struct_token","style","suffix","suffix","suffix","suffix","suffix","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","value","value","value","value","value","variadic","variants","vis","vis","where_clause","where_token","without_plus","without_plus","without_plus","without_plus","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_str","parse_terminated","peek","peek","peek2","peek3","provide","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["synsyn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::meta","","","","","","","","","","","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::spanned","","syn::tokend":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A for loop: <code>for pat in expr { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","A word of Rust code, which may be a keyword or legal …","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A raw string like <code>r##&quot;data&quot;##</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","An enum variant.","Tokens in expression position not interpreted by Syn.","","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content to …","A stably addressed token buffer supporting efficient …eturns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variant.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","Returns the number of fields.","","","","","Returns an Iterator&lt;Item = &amp;LifetimeParam&gt; over the …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeParam&gt; over the …","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","Facility for interpreting structured content inside of an …","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","<code>C</code>","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","Returns the span of this <code>Ident</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…okens representing Rust punctuation, keywords, and …eturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","In some positions, types may not contain the <code>+</code> character, …","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","","The source location of the error.","Returns the <code>Span</code> of the next token in the parse stream, or …","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,60,60,60,64,0,25,75,25,0,65,0,65,25,0,0,25,75,0,0,0,25,60,60,60,60,60,60,25,52,0,59,59,25,52,52,25,25,52,25,25,40,65,0,0,65,25,269,0,0,0,0,93,61,0,60,60,21,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,52,25,60,0,0,0,25,75,60,0,25,0,75,0,25,25,75,72,11,52,60,25,0,40,45,49,65,0,12,0,25,0,0,0,0,0,0,0,25,60,0,25,75,0,25,47,0,0,0,0,25,60,60,12,16,37,60,61,75,47,64,74,61,60,11,25,59,75,64,0,0,12,25,75,0,0,0,0,75,72,0,25,269,25,75,60,60,25,72,0,25,0,60,60,60,60,75,52,0,21,25,60,60,0,45,0,0,75,25,25,25,75,0,0,40,49,65,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,21,16,16,37,25,0,25,45,52,75,0,0,0,0,25,25,77,86,9,27,66,63,28,71,1,15,19,20,26,27,28,29,30,31,32,33,34,35,36,41,42,43,91,92,58,82,29,3,5,3,5,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,125,109,120,106,26,132,129,27,28,117,107,112,29,116,30,130,31,131,127,32,113,33,128,126,34,35,114,124,115,123,108,111,110,121,36,119,118,122,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,125,109,120,106,26,132,129,27,28,117,107,112,29,116,30,130,31,131,127,32,113,33,128,126,34,35,114,124,115,123,108,111,110,121,36,119,118,122,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,51,41,42,50,51,69,79,88,17,23,0,10,31,76,87,0,0,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,8,9,66,19,41,42,43,50,51,69,92,39,39,43,85,0,0,20,39,44,64,42,43,13,58,15,29,92,88,76,78,83,85,86,87,89,23,8,8,9,37,38,14,42,43,67,68,28,30,31,34,36,0,90,15,22,24,8,8,8,9,37,38,3,5,77,44,7,1,2,8,8,8,8,8,8,8,9,10,11,12,12,12,12,13,14,15,16,16,16,17,18,19,20,21,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,125,109,120,106,26,132,129,27,28,117,107,112,29,116,30,130,31,131,127,32,113,33,128,126,34,35,114,124,115,123,108,111,110,121,36,119,118,122,37,37,37,37,38,38,39,40,40,40,40,41,42,42,43,44,45,45,45,46,47,48,49,49,49,50,51,52,52,52,52,52,52,52,52,53,54,55,56,3,3,5,5,57,269,58,59,60,61,62,62,63,63,64,65,66,67,68,69,70,71,72,73,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,27,20,67,68,69,62,30,78,39,44,66,71,8,9,37,38,9,15,19,20,42,43,63,67,68,69,79,73,31,38,70,77,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,125,109,120,106,26,132,129,27,28,117,107,112,29,116,30,130,31,131,127,32,113,33,128,126,34,35,114,124,115,123,108,111,110,121,36,119,118,122,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,16,16,16,16,64,62,64,16,16,62,26,16,76,41,50,86,39,44,46,51,77,39,32,39,44,66,71,33,81,39,29,0,10,46,19,85,86,90,91,92,17,8,9,41,52,53,54,55,56,3,5,57,8,26,36,70,77,39,18,27,34,46,70,73,77,83,89,0,0,0,8,9,12,13,14,15,17,18,20,25,32,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,52,53,53,54,55,56,3,5,57,58,60,61,62,63,65,66,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,0,8,10,13,10,13,58,58,10,0,62,19,10,13,10,0,0,0,19,53,8,9,10,12,13,14,35,46,58,73,84,71,10,48,73,0,35,84,12,12,12,26,62,22,76,8,9,52,53,54,55,56,3,5,57,7,1,2,8,8,8,9,9,10,12,13,14,15,16,17,18,19,20,25,125,109,120,106,26,132,129,27,28,117,107,112,29,116,30,130,31,131,127,32,113,33,128,126,34,35,114,124,115,123,108,111,110,121,36,119,118,122,37,37,38,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,52,53,53,54,54,55,55,56,56,3,3,5,5,57,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,38,57,0,39,85,22,10,52,53,54,55,56,3,5,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,8,9,3,5,7,1,2,8,9,10,12,13,14,15,16,17,18,19,20,25,125,109,120,106,26,132,129,27,28,117,107,112,29,116,30,130,31,131,127,32,113,33,128,126,34,35,114,124,115,123,108,111,110,121,36,119,118,122,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,60,61,62,63,64,65,66,67,68,69,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,0,53,54,55,56,3,5,57,13,58,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,125,109,120,106,26,132,129,27,28,117,107,112,29,116,30,130,31,131,127,32,113,33,128,126,34,35,114,124,115,123,108,111,110,121,36,119,118,122,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,125,109,120,106,26,132,129,27,28,117,107,112,29,116,30,130,31,131,127,32,113,33,128,126,34,35,114,124,115,123,108,111,110,121,36,119,118,122,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,19,28,43,67,71,91,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,125,109,120,106,26,132,129,27,28,117,107,112,29,116,30,130,31,131,127,32,113,33,128,126,34,35,114,124,115,123,108,111,110,121,36,119,118,122,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,39,39,80,24,18,8,77,53,54,55,56,57,14,57,68,77,23,19,20,39,48,75,79,88,93,0,0,151,151,152,151,152,152,152,152,152,152,151,152,152,152,151,152,152,152,151,151,152,152,152,152,152,152,151,152,151,152,151,152,0,270,270,270,0,154,154,154,154,154,154,154,0,154,154,154,154,154,0,0,0,145,0,0,0,0,0,0,0,157,156,159,157,158,163,156,159,157,158,163,157,156,158,156,158,156,157,158,0,157,159,157,158,156,156,156,157,157,157,156,156,159,157,158,163,156,159,157,158,163,156,156,156,157,157,156,156,142,157,145,163,145,157,145,157,159,157,157,157,156,156,157,157,156,156,158,156,157,156,159,157,158,163,156,159,157,158,163,156,159,157,158,163,0,0,271,272,170,0,0,0,0,0,0,0,0,170,164,167,171,168,169,136,137,170,164,167,171,168,169,136,137,170,164,164,167,168,169,136,170,164,167,168,169,136,170,170,164,164,164,164,164,164,164,167,171,168,169,136,137,170,164,164,164,164,164,164,167,171,168,169,136,137,170,164,164,164,167,171,168,169,136,137,164,170,170,164,164,164,164,164,164,167,171,168,169,136,137,164,170,167,171,168,169,136,137,167,171,168,169,136,137,164,164,164,164,164,164,164,164,170,170,164,164,164,167,171,168,169,136,137,164,170,164,167,168,169,136,170,164,170,164,164,167,171,168,169,136,137,170,164,167,171,168,169,136,137,170,164,167,171,168,169,136,137,170,170,170,0,273,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,104,220,223,224,226,227,228,229,233,237,240,241,244,245,249,251,253,254,256,261,263,265,104,220,223,224,226,227,228,229,233,237,240,241,244,245,249,251,253,254,256,261,263,265,172,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,172,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,266,267,268,104,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,172,266,267,268,172,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,172,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,104,173,174,175,176,177,178,179,180,181,182,102,183,184,185,186,187,103,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,100,105,206,207,101,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268],"fp":[[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitInt"],[15,"str"],[3,"LitFloat"],[6,"Result"],[3,"ImplGenerics"],[3,"Ident"],[3,"Lifetime"],[3,"Attribute"],[4,"AttrStyle"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Variant"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Field"],[3,"DeriveInput"],[4,"Data"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[4,"Expr"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprGroup"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprMacro"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[4,"Member"],[3,"Index"],[3,"Generics"],[4,"GenericParam"],[3,"LifetimeParam"],[3,"TypeParam"],[3,"ConstParam"],[3,"BoundLifetimes"],[4,"TypeParamBound"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"WhereClause"],[4,"WherePredicate"],[3,"PredicateLifetime"],[3,"PredicateType"],[4,"Lit"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"Macro"],[4,"MacroDelimiter"],[4,"BinOp"],[4,"UnOp"],[3,"Path"],[3,"PathSegment"],[4,"PathArguments"],[4,"GenericArgument"],[3,"AngleBracketedGenericArguments"],[3,"AssocType"],[3,"AssocConst"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"QSelf"],[4,"Visibility"],[3,"VisRestricted"],[4,"FieldMutability"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"BareFnArg"],[3,"BareVariadic"],[4,"ReturnType"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"SelfType"],[3,"Super"],[3,"Crate"],[3,"Extern"],[3,"Underscore"],[3,"SelfValue"],[3,"ExprAwait"],[3,"ExprConst"],[3,"ExprStruct"],[3,"ExprAssign"],[3,"ExprTryBlock"],[3,"ExprTry"],[3,"ExprContinue"],[3,"ExprLoop"],[3,"ExprRange"],[3,"ExprRepeat"],[3,"ExprForLoop"],[3,"ExprClosure"],[3,"ExprWhile"],[3,"ExprUnsafe"],[3,"ExprAsync"],[3,"ExprTuple"],[3,"ExprYield"],[3,"ExprReturn"],[3,"ExprReference"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprLet"],[3,"ExprMatch"],[3,"ExprBreak"],[3,"ExprIf"],[3,"ExprInfer"],[3,"ExprBlock"],[15,"usize"],[3,"Literal"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"Span"],[15,"u8"],[15,"char"],[3,"TokenStream"],[8,"Parse"],[6,"ParseStream"],[3,"TokenStream"],[8,"Parser"],[3,"Vec"],[8,"FnMut"],[3,"DelimSpan"],[3,"String"],[3,"TypeId"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Delimiter"],[3,"ParseNestedMeta"],[8,"Display"],[3,"Error"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Lookahead1"],[8,"IntoIterator"],[3,"LexError"],[8,"ToTokens"],[3,"Nothing"],[3,"Punctuated"],[8,"Peek"],[3,"Demand"],[3,"Pairs"],[3,"IntoPairs"],[3,"IntoIter"],[4,"Pair"],[3,"PairsMut"],[3,"Group"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Static"],[3,"Struct"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Comma"],[3,"Dollar"],[3,"Dot"],[3,"DotDot"],[3,"DotDotDot"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"FatArrow"],[3,"Ge"],[3,"Gt"],[3,"LArrow"],[3,"Le"],[3,"Lt"],[3,"Minus"],[3,"MinusEq"],[3,"Ne"],[3,"Not"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"PathSep"],[3,"Percent"],[3,"PercentEq"],[3,"Plus"],[3,"PlusEq"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Slash"],[3,"SlashEq"],[3,"Star"],[3,"StarEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[4,"StrStyle"],[8,"IdentExt"],[8,"Speculative"],[8,"AnyDelimiter"],[8,"Spanned"]]},\
"thiserror":{"doc":"github crates-io docs-rs","t":"Y","n":["Error"],"q":["thiserror"],"d":[""],"i":[0],"f":[0],"p":[]},\
"thiserror_impl":{"doc":"","t":"Y","n":["Error"],"q":["thiserror_impl"],"d":[""],"i":[0],"f":[0],"p":[]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":["unicode_ident",""],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"p":[[15,"char"],[15,"bool"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
